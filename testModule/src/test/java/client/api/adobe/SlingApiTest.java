/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package client.api.adobe;

import java.math.BigDecimal;
import java.io.File;
import org.openapitools.client.model.adobe.KeystoreInfo;
import org.openapitools.client.model.adobe.TruststoreInfo;
import org.openapitools.client.service.adobeService.ApiClient;
import org.openapitools.client.api.adobe.SlingApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static org.openapitools.client.service.adobeService.GsonObjectMapper.gson;

/**
 * API tests for SlingApi
 */
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import org.junit.jupiter.api.*;

@Tag("api")
@Epic("setEpic")
@Feature("setFeature")
@Story("setStory")
@Disabled
public class SlingApiTest {

    private SlingApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://api.apis.guru"))).sling();
    }

    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterDeleteAgent() {
        String runmode = null;
        String name = null;
        api.deleteAgent()
                .runmodePath(runmode)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterDeleteNode() {
        String path = null;
        String name = null;
        api.deleteNode()
                .pathPath(path)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetAgent() {
        String runmode = null;
        String name = null;
        api.getAgent()
                .runmodePath(runmode)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetAgents() {
        String runmode = null;
        api.getAgents()
                .runmodePath(runmode).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Retrieved Authorizable Keystore info
     */
    @Test
    public void shouldSee200AfterGetAuthorizableKeystore() {
        String intermediatePath = null;
        String authorizableId = null;
        api.getAuthorizableKeystore()
                .intermediatePathPath(intermediatePath)
                .authorizableIdPath(authorizableId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetAuthorizableKeystore() {
        String intermediatePath = null;
        String authorizableId = null;
        api.getAuthorizableKeystore()
                .intermediatePathPath(intermediatePath)
                .authorizableIdPath(authorizableId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetKeystore() {
        String intermediatePath = null;
        String authorizableId = null;
        api.getKeystore()
                .intermediatePathPath(intermediatePath)
                .authorizableIdPath(authorizableId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetNode() {
        String path = null;
        String name = null;
        api.getNode()
                .pathPath(path)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetPackage() {
        String group = null;
        String name = null;
        String version = null;
        api.getPackage()
                .groupPath(group)
                .namePath(name)
                .versionPath(version).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetPackageFilter() {
        String group = null;
        String name = null;
        String version = null;
        api.getPackageFilter()
                .groupPath(group)
                .namePath(name)
                .versionPath(version).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetQuery() {
        String path = null;
        BigDecimal pLimit = null;
        String _1property = null;
        String _1propertyValue = null;
        api.getQuery()
                .pathQuery(path)
                .pLimitQuery(pLimit)
                ._1propertyQuery(_1property)
                ._1propertyValueQuery(_1propertyValue).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetTruststore() {
        api.getTruststore().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Retrieved AEM Truststore info
     */
    @Test
    public void shouldSee200AfterGetTruststoreInfo() {
        api.getTruststoreInfo().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterGetTruststoreInfo() {
        api.getTruststoreInfo().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostAgent() {
        String runmode = null;
        String name = null;
        Boolean jcrColonContentCqColonDistribute = null;
        String jcrColonContentCqColonDistributeAtTypeHint = null;
        String jcrColonContentCqColonName = null;
        String jcrColonContentCqColonTemplate = null;
        Boolean jcrColonContentEnabled = null;
        String jcrColonContentJcrColonDescription = null;
        String jcrColonContentJcrColonLastModified = null;
        String jcrColonContentJcrColonLastModifiedBy = null;
        String jcrColonContentJcrColonMixinTypes = null;
        String jcrColonContentJcrColonTitle = null;
        String jcrColonContentLogLevel = null;
        Boolean jcrColonContentNoStatusUpdate = null;
        Boolean jcrColonContentNoVersioning = null;
        BigDecimal jcrColonContentProtocolConnectTimeout = null;
        Boolean jcrColonContentProtocolHTTPConnectionClosed = null;
        String jcrColonContentProtocolHTTPExpired = null;
        List<String> jcrColonContentProtocolHTTPHeaders = null;
        String jcrColonContentProtocolHTTPHeadersAtTypeHint = null;
        String jcrColonContentProtocolHTTPMethod = null;
        Boolean jcrColonContentProtocolHTTPSRelaxed = null;
        String jcrColonContentProtocolInterface = null;
        BigDecimal jcrColonContentProtocolSocketTimeout = null;
        String jcrColonContentProtocolVersion = null;
        String jcrColonContentProxyNTLMDomain = null;
        String jcrColonContentProxyNTLMHost = null;
        String jcrColonContentProxyHost = null;
        String jcrColonContentProxyPassword = null;
        BigDecimal jcrColonContentProxyPort = null;
        String jcrColonContentProxyUser = null;
        BigDecimal jcrColonContentQueueBatchMaxSize = null;
        String jcrColonContentQueueBatchMode = null;
        BigDecimal jcrColonContentQueueBatchWaitTime = null;
        String jcrColonContentRetryDelay = null;
        Boolean jcrColonContentReverseReplication = null;
        String jcrColonContentSerializationType = null;
        String jcrColonContentSlingColonResourceType = null;
        String jcrColonContentSsl = null;
        String jcrColonContentTransportNTLMDomain = null;
        String jcrColonContentTransportNTLMHost = null;
        String jcrColonContentTransportPassword = null;
        String jcrColonContentTransportUri = null;
        String jcrColonContentTransportUser = null;
        Boolean jcrColonContentTriggerDistribute = null;
        Boolean jcrColonContentTriggerModified = null;
        Boolean jcrColonContentTriggerOnOffTime = null;
        Boolean jcrColonContentTriggerReceive = null;
        Boolean jcrColonContentTriggerSpecific = null;
        String jcrColonContentUserId = null;
        String jcrColonPrimaryType = null;
        String colonOperation = null;
        api.postAgent()
                .runmodePath(runmode)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Retrieved Authorizable Keystore info
     */
    @Test
    public void shouldSee200AfterPostAuthorizableKeystore() {
        String intermediatePath = null;
        String authorizableId = null;
        String colonOperation = null;
        String currentPassword = null;
        String newPassword = null;
        String rePassword = null;
        String keyPassword = null;
        String keyStorePass = null;
        String alias = null;
        String newAlias = null;
        String removeAlias = null;
        File certChain = null;
        File keyStore = null;
        File pk = null;
        api.postAuthorizableKeystore()
                .intermediatePathPath(intermediatePath)
                .authorizableIdPath(authorizableId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostAuthorizableKeystore() {
        String intermediatePath = null;
        String authorizableId = null;
        String colonOperation = null;
        String currentPassword = null;
        String newPassword = null;
        String rePassword = null;
        String keyPassword = null;
        String keyStorePass = null;
        String alias = null;
        String newAlias = null;
        String removeAlias = null;
        File certChain = null;
        File keyStore = null;
        File pk = null;
        api.postAuthorizableKeystore()
                .intermediatePathPath(intermediatePath)
                .authorizableIdPath(authorizableId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostAuthorizables() {
        String authorizableId = null;
        String intermediatePath = null;
        String createUser = null;
        String createGroup = null;
        String repColonPassword = null;
        String profileGivenName = null;
        api.postAuthorizables()
                .authorizableIdQuery(authorizableId)
                .intermediatePathQuery(intermediatePath).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigAdobeGraniteSamlAuthenticationHandler() {
        String keyStorePassword = null;
        String keyStorePasswordAtTypeHint = null;
        Integer serviceRanking = null;
        String serviceRankingAtTypeHint = null;
        Boolean idpHttpRedirect = null;
        String idpHttpRedirectAtTypeHint = null;
        Boolean createUser = null;
        String createUserAtTypeHint = null;
        String defaultRedirectUrl = null;
        String defaultRedirectUrlAtTypeHint = null;
        String userIDAttribute = null;
        String userIDAttributeAtTypeHint = null;
        List<String> defaultGroups = null;
        String defaultGroupsAtTypeHint = null;
        String idpCertAlias = null;
        String idpCertAliasAtTypeHint = null;
        Boolean addGroupMemberships = null;
        String addGroupMembershipsAtTypeHint = null;
        List<String> path = null;
        String pathAtTypeHint = null;
        List<String> synchronizeAttributes = null;
        String synchronizeAttributesAtTypeHint = null;
        Integer clockTolerance = null;
        String clockToleranceAtTypeHint = null;
        String groupMembershipAttribute = null;
        String groupMembershipAttributeAtTypeHint = null;
        String idpUrl = null;
        String idpUrlAtTypeHint = null;
        String logoutUrl = null;
        String logoutUrlAtTypeHint = null;
        String serviceProviderEntityId = null;
        String serviceProviderEntityIdAtTypeHint = null;
        String assertionConsumerServiceURL = null;
        String assertionConsumerServiceURLAtTypeHint = null;
        Boolean handleLogout = null;
        String handleLogoutAtTypeHint = null;
        String spPrivateKeyAlias = null;
        String spPrivateKeyAliasAtTypeHint = null;
        Boolean useEncryption = null;
        String useEncryptionAtTypeHint = null;
        String nameIdFormat = null;
        String nameIdFormatAtTypeHint = null;
        String digestMethod = null;
        String digestMethodAtTypeHint = null;
        String signatureMethod = null;
        String signatureMethodAtTypeHint = null;
        String userIntermediatePath = null;
        String userIntermediatePathAtTypeHint = null;
        api.postConfigAdobeGraniteSamlAuthenticationHandler().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigApacheFelixJettyBasedHttpService() {
        Boolean orgApacheFelixHttpsNio = null;
        String orgApacheFelixHttpsNioAtTypeHint = null;
        String orgApacheFelixHttpsKeystore = null;
        String orgApacheFelixHttpsKeystoreAtTypeHint = null;
        String orgApacheFelixHttpsKeystorePassword = null;
        String orgApacheFelixHttpsKeystorePasswordAtTypeHint = null;
        String orgApacheFelixHttpsKeystoreKey = null;
        String orgApacheFelixHttpsKeystoreKeyAtTypeHint = null;
        String orgApacheFelixHttpsKeystoreKeyPassword = null;
        String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint = null;
        String orgApacheFelixHttpsTruststore = null;
        String orgApacheFelixHttpsTruststoreAtTypeHint = null;
        String orgApacheFelixHttpsTruststorePassword = null;
        String orgApacheFelixHttpsTruststorePasswordAtTypeHint = null;
        String orgApacheFelixHttpsClientcertificate = null;
        String orgApacheFelixHttpsClientcertificateAtTypeHint = null;
        Boolean orgApacheFelixHttpsEnable = null;
        String orgApacheFelixHttpsEnableAtTypeHint = null;
        String orgOsgiServiceHttpPortSecure = null;
        String orgOsgiServiceHttpPortSecureAtTypeHint = null;
        api.postConfigApacheFelixJettyBasedHttpService().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigApacheHttpComponentsProxyConfiguration() {
        String proxyHost = null;
        String proxyHostAtTypeHint = null;
        Integer proxyPort = null;
        String proxyPortAtTypeHint = null;
        List<String> proxyExceptions = null;
        String proxyExceptionsAtTypeHint = null;
        Boolean proxyEnabled = null;
        String proxyEnabledAtTypeHint = null;
        String proxyUser = null;
        String proxyUserAtTypeHint = null;
        String proxyPassword = null;
        String proxyPasswordAtTypeHint = null;
        api.postConfigApacheHttpComponentsProxyConfiguration().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigApacheSlingDavExServlet() {
        String alias = null;
        String aliasAtTypeHint = null;
        Boolean davCreateAbsoluteUri = null;
        String davCreateAbsoluteUriAtTypeHint = null;
        api.postConfigApacheSlingDavExServlet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigApacheSlingGetServlet() {
        String jsonMaximumresults = null;
        String jsonMaximumresultsAtTypeHint = null;
        Boolean enableHtml = null;
        String enableHtmlAtTypeHint = null;
        Boolean enableTxt = null;
        String enableTxtAtTypeHint = null;
        Boolean enableXml = null;
        String enableXmlAtTypeHint = null;
        api.postConfigApacheSlingGetServlet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigApacheSlingReferrerFilter() {
        Boolean allowEmpty = null;
        String allowEmptyAtTypeHint = null;
        String allowHosts = null;
        String allowHostsAtTypeHint = null;
        String allowHostsRegexp = null;
        String allowHostsRegexpAtTypeHint = null;
        String filterMethods = null;
        String filterMethodsAtTypeHint = null;
        api.postConfigApacheSlingReferrerFilter().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostConfigProperty() {
        String configNodeName = null;
        api.postConfigProperty()
                .configNodeNamePath(configNodeName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostNode() {
        String path = null;
        String name = null;
        String colonOperation = null;
        String deleteAuthorizable = null;
        File _file = null;
        api.postNode()
                .pathPath(path)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostNodeRw() {
        String path = null;
        String name = null;
        String addMembers = null;
        api.postNodeRw()
                .pathPath(path)
                .namePath(name).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostPath() {
        String path = null;
        String jcrColonPrimaryType = null;
        String colonName = null;
        api.postPath()
                .pathPath(path)
                .jcrColonPrimaryTypeQuery(jcrColonPrimaryType)
                .colonNameQuery(colonName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostQuery() {
        String path = null;
        BigDecimal pLimit = null;
        String _1property = null;
        String _1propertyValue = null;
        api.postQuery()
                .pathQuery(path)
                .pLimitQuery(pLimit)
                ._1propertyQuery(_1property)
                ._1propertyValueQuery(_1propertyValue).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostTreeActivation() {
        Boolean ignoredeactivated = null;
        Boolean onlymodified = null;
        String path = null;
        String cmd = null;
        api.postTreeActivation()
                .ignoredeactivatedQuery(ignoredeactivated)
                .onlymodifiedQuery(onlymodified)
                .pathQuery(path)
                .cmdQuery(cmd).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostTruststore() {
        String colonOperation = null;
        String newPassword = null;
        String rePassword = null;
        String keyStoreType = null;
        String removeAlias = null;
        File certificate = null;
        api.postTruststore().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Default response
     */
    @Test
    public void shouldSee0AfterPostTruststorePKCS12() {
        File truststoreP12 = null;
        api.postTruststorePKCS12().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
