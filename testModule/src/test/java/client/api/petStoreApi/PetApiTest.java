/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package client.api.petStoreApi;

import java.io.File;

import base.BasePetstoreApiTest;
import io.restassured.response.Response;
import org.jetbrains.annotations.NotNull;
import org.openapitools.client.model.petStoreModel.Pet;
import org.openapitools.client.api.petStoreApi.PetApi;
import org.junit.jupiter.api.Test;


import java.util.*;
import java.util.function.Function;

import static io.restassured.RestAssured.given;

/**
 * API tests for PetApi
 */
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import org.junit.jupiter.api.*;

@Tag("base")
@Epic("setEpic")
@Feature("setFeature")
@Story("setStory")
//@Disabled
public class PetApiTest extends BasePetstoreApiTest {

    private PetApi api = petApi;

    /**
     * Invalid input
     */
    @Test
    public void shouldSee200AfterAddPet() {
        Pet body = new Pet();
        body.setId(20L);

        Response response = api.addPet()
                .body(body)
                .execute(checkSuccessStatusCode());
    }

    @Test
    public void shouldSee405AfterAddPet2() {
        // Define the base URI for the Petstore API
        String baseUri = "https://petstore.swagger.io/v2";

        // Send a POST request directly using RestAssured, with a null body
        given()
                .baseUri(baseUri)
                .basePath("/pet")
                .contentType("application/json")
                .body("")
                .when()
                .post()
                .then()
                .statusCode(405); // Replace with the expected status code
    }


    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterDeletePet() {
        Long petId = null;
        String apiKey = null;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterDeletePet() {
        Long petId = null;
        String apiKey = null;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterFindPetsByStatus() {
        List<String> status = List.of("123123");
        Response response = api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek());
        System.out.println("response: " + response.body().toString());
        // TODO: test validations
    }

    /**
     * Invalid status value
     */
    @Test
    public void shouldSee400AfterFindPetsByStatus() {
        List<String> status = null;
        api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterFindPetsByTags() {
        List<String> tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid tag value
     */
    @Test
    public void shouldSee400AfterFindPetsByTags() {
        List<String> tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterGetPetById() {
        Long petId = 1L;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterGetPetById() {
        Long petId = null;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterGetPetById() {
        Long petId = null;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterUpdatePet() {
        Pet body = null;
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterUpdatePet() {
        Pet body = null;
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Validation exception
     */
    @Test
    public void shouldSee405AfterUpdatePet() {
        Pet body = null;
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Invalid input
     */
    @Test
    public void shouldSee405AfterUpdatePetWithForm() {
        Long petId = null;
        String name = null;
        String status = null;
        api.updatePetWithForm()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterUploadFile() {
        Long petId = null;
        String additionalMetadata = null;
        File _file = null;
        api.uploadFile()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
