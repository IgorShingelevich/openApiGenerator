/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package client.api.petStoreApi;

import java.io.File;

import base.BasePetstoreApiTest;
import io.restassured.response.Response;
import org.jetbrains.annotations.NotNull;
import org.openapitools.client.model.petStoreModel.Pet;
import org.openapitools.client.api.petStoreApi.PetApi;
import org.junit.jupiter.api.Test;


import java.util.*;
import java.util.function.Function;

import static io.restassured.RestAssured.given;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static utils.JsonUtils.readObjectFromJsonFile;

/**
 * API tests for PetApi
 */
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import org.junit.jupiter.api.*;

@Tag("base")
@Epic("setEpic")
@Feature("setFeature")
@Story("setStory")
//@Disabled
public class PetApiTest extends BasePetstoreApiTest {

    private PetApi api = petApi;

    /**
     * Invalid input
     */
    @Test
    public void shouldSee200AfterAddPet() {
        Pet body = new Pet();
        body.setId(20L);
        body.setName("doggieName");
        body.setStatus(Pet.StatusEnum.AVAILABLE);

        Pet actualPet = api.addPet()
                .body(body)
                .execute(checkSuccessStatusCode())
                .then()
                .extract()
                .as(Pet.class);

        Pet expectedFromGetPet = api.getPetById()
                .petIdPath(20L).execute(checkSuccessStatusCode())
                .then()
                .extract()
                .as(Pet.class);

        Pet expectedFromFile = readObjectFromJsonFile("src/test/resources/petId20getResponseBody.json", "$", Pet.class);
        assertThat(expectedFromFile)
                .as("Check if the pet from the file is an instance of Pet")
                .isInstanceOf(Pet.class);
        assertThat(expectedFromFile)
                .as("Check if the pet from the file matches the pet retrieved from API")
                .isEqualTo(expectedFromGetPet);
        assertThat(actualPet)
                .as("Check if the actual pet added matches the pet from the file")
                .isEqualTo(expectedFromFile);
        assertThat(actualPet)
                .as("Check if the actual pet added matches the pet retrieved from API")
                .isEqualTo(expectedFromGetPet);
    }

    @Test
    public void shouldSee200AfterAddPetVerbosePolling() {
        // Reading pet details from the file
        Pet expectedFromFile = readObjectFromJsonFile("src/test/resources/petId20getResponseBody.json", "$", Pet.class);

        // Adding the pet from the file
        Pet actualPet = api.addPet()
                .body(expectedFromFile)
                .execute(checkSuccessStatusCode())
                .then()
                .extract()
                .as(Pet.class);

        // Polling the status and retrieving the pet
        Pet expectedFromGetPet = null;
        for (int i = 0; i < 10; i++) { // Assuming a maximum of 10 attempts
            try {
                Thread.sleep(1000); // Delay for polling, adjust as needed
                Response response = api.getPetById()
                        .petIdPath(expectedFromFile.getId()).execute(checkSuccessStatusCode())
                        .andReturn();

                int statusCode = response.getStatusCode();
                if (statusCode != 200) {
                    fail("Failed to retrieve the pet: expected status code 200 but got " + statusCode);
                }

                expectedFromGetPet = response.then().extract().as(Pet.class);

                if ("successful".equals(expectedFromGetPet.getStatus())) {
                    break;
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                fail("Polling thread was interrupted: " + e.getMessage());
            } catch (Exception e) {
                fail("Error occurred while polling the pet status: " + e.getMessage());
            }
        }

        if (expectedFromGetPet == null || !"successful".equals(expectedFromGetPet.getStatus())) {
            fail("Failed to retrieve the pet with a successful status");
        }

        // Asserting that the expected pet from file matches the one retrieved from the API
        assertThat(expectedFromFile)
                .as("Check if the pet from the file matches the pet retrieved from API")
                .isEqualTo(expectedFromGetPet);

        // Asserting that the actual pet added matches the one retrieved from the API
        assertThat(actualPet)
                .as("Check if the actual pet added matches the pet retrieved from API")
                .isEqualTo(expectedFromGetPet);
    }

    @Test
    public void shouldSee200AfterAddPetPolling() {
        // Reading pet details from the file
        Pet expectedFromFile = readObjectFromJsonFile("src/test/resources/petId20getResponseBody.json", "$", Pet.class);

        // Adding the pet from the file
        Pet actualPet = api.addPet()
                .body(expectedFromFile)
                .execute(checkSuccessStatusCode())
                .then()
                .extract()
                .as(Pet.class);

        // Polling the status and retrieving the pet
        Pet expectedFromGetPet = null;
        boolean isAvailable = false;
        for (int i = 0; i < 3; i++) { // Assuming a maximum of 10 attempts
            try {
                Thread.sleep(1000); // Delay for polling, adjust as needed
                Response response = api.getPetById()
                        .petIdPath(expectedFromFile.getId()).execute(r-> r.prettyPeek())
                        .andReturn();

                int statusCode = response.getStatusCode();
                assertThat(statusCode)
                        .as("Check if the status code is 200")
                        .isEqualTo(200);

                expectedFromGetPet = response.then().extract().as(Pet.class);

                if ("available".equals(expectedFromGetPet.getStatus())) {
                    isAvailable = true;
                    break;
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                fail("Polling thread was interrupted: " + e.getMessage());
            } catch (Exception e) {
                fail("Error occurred while polling the pet status: " + e.getMessage());
            }
        }

// Assert that the pet's status becomes 'available' within the maximum number of attempts
        assertThat(isAvailable)
                .as("Check if the pet's status becomes 'available' within the maximum number of attempts")
                .isTrue();


        if (!isAvailable) {
            fail("Failed to retrieve the pet with an 'available' status within the maximum number of attempts");
        }



        // Asserting that the expected pet from file matches the one retrieved from the API
        assertThat(expectedFromFile)
                .as("Check if the pet from the file matches the pet retrieved from API")
                .isEqualTo(actualPet);

        // Asserting that the actual pet added matches the one retrieved from the API
        assertThat(actualPet)
                .as("Check if the actual pet added matches the pet retrieved from API")
                .isEqualTo(expectedFromFile);
    }

    @Test
    public void shouldSee200AfterAddPetPollingSimple() {
        // Reading pet details from the file
        Pet expectedFromFile = readObjectFromJsonFile("src/test/resources/petId20getResponseBody.json", "$", Pet.class);

        // Adding the pet from the file
        Pet actualPet = api.addPet()
                .body(expectedFromFile)
                .execute(checkSuccessStatusCode())
                .then()
                .extract()
                .as(Pet.class);

        // Polling the status and retrieving the pet
        String expectedStatus = "vailable"; // Assuming this is intentional
        Pet petDtoFromLoopPolling = null;
        boolean statusFieldMatched = false;
        boolean statusCodeMatched = false;

        for (int i = 0; i < 3; i++) {
            try {
                Thread.sleep(1000); // Delay for polling

                Response response = api.getPetById()
                        .petIdPath(expectedFromFile.getId()).execute(r -> r.prettyPeek())
                        .andReturn();

                petDtoFromLoopPolling = response.then().extract().as(Pet.class);
                int statusCode = response.getStatusCode();

                if (statusCode == 200) {
                    statusCodeMatched = true;
                    String statusField = petDtoFromLoopPolling.getStatus().toString();

                    if (statusField.equals(expectedStatus)) {
                        statusFieldMatched = true;
                        break; // Exit loop if status matches
                    }
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                fail("Test interrupted");
            }
        }
        assertThat(statusCodeMatched)
                .as("Status code should be 200 after " + 3 + " tries")
                .isTrue();

        assertThat(statusFieldMatched)
                .as("Status field should match expected status after " + 3 + " tries")
                .isTrue();

        assertThat(petDtoFromLoopPolling)
                .as("Check if the pet from the file matches the pet retrieved from API")
                .isEqualTo(actualPet);
    }


    @Test
    public void shouldSee405AfterAddPet2() {
        // Define the base URI for the Petstore API
        String baseUri = "https://petstore.swagger.io/v2";

        // Send a POST request directly using RestAssured, with a null body
        given()
                .baseUri(baseUri)
                .basePath("/pet")
                .contentType("application/json")
                .body("")
                .when()
                .post()
                .then()
                .statusCode(405); // Replace with the expected status code
    }


    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterDeletePet() {
        Long petId = null;
        String apiKey = null;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterDeletePet() {
        Long petId = null;
        String apiKey = null;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterFindPetsByStatus() {
        List<String> status = List.of("123123");
        Response response = api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek());
        System.out.println("response: " + response.body().toString());
        // TODO: test validations
    }

    /**
     * Invalid status value
     */
    @Test
    public void shouldSee400AfterFindPetsByStatus() {
        List<String> status = null;
        api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterFindPetsByTags() {
        List<String> tags = List.of("123");
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid tag value
     */
    @Test
    public void shouldSee400AfterFindPetsByTags() {
        List<String> tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterGetPetById() {
        Long petId = 1L;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterGetPetById() {
        Long petId = null;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterGetPetById() {
        Long petId = null;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterUpdatePet() {
        Pet body = null;
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterUpdatePet() {
        Pet body = null;
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Validation exception
     */
    @Test
    public void shouldSee405AfterUpdatePet() {
        Pet body = null;
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Invalid input
     */
    @Test
    public void shouldSee405AfterUpdatePetWithForm() {
        Long petId = null;
        String name = null;
        String status = null;
        api.updatePetWithForm()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterUploadFile() {
        Long petId = null;
        String additionalMetadata = null;
        File _file = null;
        api.uploadFile()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
