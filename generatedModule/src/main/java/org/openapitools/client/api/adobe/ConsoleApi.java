/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api.adobe;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.adobe.BundleInfo;
import org.openapitools.client.model.adobe.SamlConfigurationInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.service.adobeService.JSON;
import static io.restassured.http.Method.*;

public class ConsoleApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private ConsoleApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static ConsoleApi console(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new ConsoleApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                getAemProductInfo(),
                getBundleInfo(),
                getConfigMgr(),
                postBundle(),
                postJmxRepository(),
                postSamlConfiguration()
        );
    }

    public GetAemProductInfoOper getAemProductInfo() {
        return new GetAemProductInfoOper(createReqSpec());
    }

    public GetBundleInfoOper getBundleInfo() {
        return new GetBundleInfoOper(createReqSpec());
    }

    public GetConfigMgrOper getConfigMgr() {
        return new GetConfigMgrOper(createReqSpec());
    }

    public PostBundleOper postBundle() {
        return new PostBundleOper(createReqSpec());
    }

    public PostJmxRepositoryOper postJmxRepository() {
        return new PostJmxRepositoryOper(createReqSpec());
    }

    public PostSamlConfigurationOper postSamlConfiguration() {
        return new PostSamlConfigurationOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public ConsoleApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * return List&lt;String&gt;
     */
    public static class GetAemProductInfoOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/system/console/status-productinfo.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAemProductInfoOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /system/console/status-productinfo.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /system/console/status-productinfo.json
         * @param handler handler
         * @return List&lt;String&gt;
         */
        public List<String> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<String>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAemProductInfoOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAemProductInfoOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     * return BundleInfo
     */
    public static class GetBundleInfoOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/system/console/bundles/{name}.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBundleInfoOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /system/console/bundles/{name}.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /system/console/bundles/{name}.json
         * @param handler handler
         * @return BundleInfo
         */
        public BundleInfo executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<BundleInfo>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public GetBundleInfoOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBundleInfoOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBundleInfoOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return String
     */
    public static class GetConfigMgrOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/system/console/configMgr";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConfigMgrOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/xml");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /system/console/configMgr
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /system/console/configMgr
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConfigMgrOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConfigMgrOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     * @see #actionQuery  (required)
     */
    public static class PostBundleOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/system/console/bundles/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostBundleOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /system/console/bundles/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public PostBundleOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        public static final String ACTION_QUERY = "action";

        /**
         * @param action (String)  (required)
         * @return operation
         */
        public PostBundleOper actionQuery(Object... action) {
            reqSpec.addQueryParam(ACTION_QUERY, action);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostBundleOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostBundleOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #actionPath  (required)
     */
    public static class PostJmxRepositoryOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/{action}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostJmxRepositoryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/{action}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ACTION_PATH = "action";

        /**
         * @param action (String)  (required)
         * @return operation
         */
        public PostJmxRepositoryOper actionPath(Object action) {
            reqSpec.addPathParam(ACTION_PATH, action);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostJmxRepositoryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostJmxRepositoryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #postQuery  (optional)
     * @see #applyQuery  (optional)
     * @see #deleteQuery  (optional)
     * @see #actionQuery  (optional)
     * @see #$locationQuery  (optional)
     * @see #pathQuery  (optional)
     * @see #serviceRankingQuery  (optional)
     * @see #idpUrlQuery  (optional)
     * @see #idpCertAliasQuery  (optional)
     * @see #idpHttpRedirectQuery  (optional)
     * @see #serviceProviderEntityIdQuery  (optional)
     * @see #assertionConsumerServiceURLQuery  (optional)
     * @see #spPrivateKeyAliasQuery  (optional)
     * @see #keyStorePasswordQuery  (optional)
     * @see #defaultRedirectUrlQuery  (optional)
     * @see #userIDAttributeQuery  (optional)
     * @see #useEncryptionQuery  (optional)
     * @see #createUserQuery  (optional)
     * @see #addGroupMembershipsQuery  (optional)
     * @see #groupMembershipAttributeQuery  (optional)
     * @see #defaultGroupsQuery  (optional)
     * @see #nameIdFormatQuery  (optional)
     * @see #synchronizeAttributesQuery  (optional)
     * @see #handleLogoutQuery  (optional)
     * @see #logoutUrlQuery  (optional)
     * @see #clockToleranceQuery  (optional)
     * @see #digestMethodQuery  (optional)
     * @see #signatureMethodQuery  (optional)
     * @see #userIntermediatePathQuery  (optional)
     * @see #propertylistQuery  (optional)
     * return SamlConfigurationInfo
     */
    public static class PostSamlConfigurationOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostSamlConfigurationOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
         * @param handler handler
         * @return SamlConfigurationInfo
         */
        public SamlConfigurationInfo executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<SamlConfigurationInfo>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String POST_QUERY = "post";

        /**
         * @param post (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper postQuery(Object... post) {
            reqSpec.addQueryParam(POST_QUERY, post);
            return this;
        }

        public static final String APPLY_QUERY = "apply";

        /**
         * @param apply (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper applyQuery(Object... apply) {
            reqSpec.addQueryParam(APPLY_QUERY, apply);
            return this;
        }

        public static final String DELETE_QUERY = "delete";

        /**
         * @param delete (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper deleteQuery(Object... delete) {
            reqSpec.addQueryParam(DELETE_QUERY, delete);
            return this;
        }

        public static final String ACTION_QUERY = "action";

        /**
         * @param action (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper actionQuery(Object... action) {
            reqSpec.addQueryParam(ACTION_QUERY, action);
            return this;
        }

        public static final String $LOCATION_QUERY = "$location";

        /**
         * @param $location (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper $locationQuery(Object... $location) {
            reqSpec.addQueryParam($LOCATION_QUERY, $location);
            return this;
        }

        public static final String PATH_QUERY = "path";

        /**
         * @param path (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper pathQuery(Object... path) {
            reqSpec.addQueryParam(PATH_QUERY, path);
            return this;
        }

        public static final String SERVICE_RANKING_QUERY = "service.ranking";

        /**
         * @param serviceRanking (Integer)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper serviceRankingQuery(Object... serviceRanking) {
            reqSpec.addQueryParam(SERVICE_RANKING_QUERY, serviceRanking);
            return this;
        }

        public static final String IDP_URL_QUERY = "idpUrl";

        /**
         * @param idpUrl (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper idpUrlQuery(Object... idpUrl) {
            reqSpec.addQueryParam(IDP_URL_QUERY, idpUrl);
            return this;
        }

        public static final String IDP_CERT_ALIAS_QUERY = "idpCertAlias";

        /**
         * @param idpCertAlias (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper idpCertAliasQuery(Object... idpCertAlias) {
            reqSpec.addQueryParam(IDP_CERT_ALIAS_QUERY, idpCertAlias);
            return this;
        }

        public static final String IDP_HTTP_REDIRECT_QUERY = "idpHttpRedirect";

        /**
         * @param idpHttpRedirect (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper idpHttpRedirectQuery(Object... idpHttpRedirect) {
            reqSpec.addQueryParam(IDP_HTTP_REDIRECT_QUERY, idpHttpRedirect);
            return this;
        }

        public static final String SERVICE_PROVIDER_ENTITY_ID_QUERY = "serviceProviderEntityId";

        /**
         * @param serviceProviderEntityId (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper serviceProviderEntityIdQuery(Object... serviceProviderEntityId) {
            reqSpec.addQueryParam(SERVICE_PROVIDER_ENTITY_ID_QUERY, serviceProviderEntityId);
            return this;
        }

        public static final String ASSERTION_CONSUMER_SERVICE_U_R_L_QUERY = "assertionConsumerServiceURL";

        /**
         * @param assertionConsumerServiceURL (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper assertionConsumerServiceURLQuery(Object... assertionConsumerServiceURL) {
            reqSpec.addQueryParam(ASSERTION_CONSUMER_SERVICE_U_R_L_QUERY, assertionConsumerServiceURL);
            return this;
        }

        public static final String SP_PRIVATE_KEY_ALIAS_QUERY = "spPrivateKeyAlias";

        /**
         * @param spPrivateKeyAlias (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper spPrivateKeyAliasQuery(Object... spPrivateKeyAlias) {
            reqSpec.addQueryParam(SP_PRIVATE_KEY_ALIAS_QUERY, spPrivateKeyAlias);
            return this;
        }

        public static final String KEY_STORE_PASSWORD_QUERY = "keyStorePassword";

        /**
         * @param keyStorePassword (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper keyStorePasswordQuery(Object... keyStorePassword) {
            reqSpec.addQueryParam(KEY_STORE_PASSWORD_QUERY, keyStorePassword);
            return this;
        }

        public static final String DEFAULT_REDIRECT_URL_QUERY = "defaultRedirectUrl";

        /**
         * @param defaultRedirectUrl (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper defaultRedirectUrlQuery(Object... defaultRedirectUrl) {
            reqSpec.addQueryParam(DEFAULT_REDIRECT_URL_QUERY, defaultRedirectUrl);
            return this;
        }

        public static final String USER_I_D_ATTRIBUTE_QUERY = "userIDAttribute";

        /**
         * @param userIDAttribute (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper userIDAttributeQuery(Object... userIDAttribute) {
            reqSpec.addQueryParam(USER_I_D_ATTRIBUTE_QUERY, userIDAttribute);
            return this;
        }

        public static final String USE_ENCRYPTION_QUERY = "useEncryption";

        /**
         * @param useEncryption (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper useEncryptionQuery(Object... useEncryption) {
            reqSpec.addQueryParam(USE_ENCRYPTION_QUERY, useEncryption);
            return this;
        }

        public static final String CREATE_USER_QUERY = "createUser";

        /**
         * @param createUser (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper createUserQuery(Object... createUser) {
            reqSpec.addQueryParam(CREATE_USER_QUERY, createUser);
            return this;
        }

        public static final String ADD_GROUP_MEMBERSHIPS_QUERY = "addGroupMemberships";

        /**
         * @param addGroupMemberships (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper addGroupMembershipsQuery(Object... addGroupMemberships) {
            reqSpec.addQueryParam(ADD_GROUP_MEMBERSHIPS_QUERY, addGroupMemberships);
            return this;
        }

        public static final String GROUP_MEMBERSHIP_ATTRIBUTE_QUERY = "groupMembershipAttribute";

        /**
         * @param groupMembershipAttribute (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper groupMembershipAttributeQuery(Object... groupMembershipAttribute) {
            reqSpec.addQueryParam(GROUP_MEMBERSHIP_ATTRIBUTE_QUERY, groupMembershipAttribute);
            return this;
        }

        public static final String DEFAULT_GROUPS_QUERY = "defaultGroups";

        /**
         * @param defaultGroups (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper defaultGroupsQuery(Object... defaultGroups) {
            reqSpec.addQueryParam(DEFAULT_GROUPS_QUERY, defaultGroups);
            return this;
        }

        public static final String NAME_ID_FORMAT_QUERY = "nameIdFormat";

        /**
         * @param nameIdFormat (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper nameIdFormatQuery(Object... nameIdFormat) {
            reqSpec.addQueryParam(NAME_ID_FORMAT_QUERY, nameIdFormat);
            return this;
        }

        public static final String SYNCHRONIZE_ATTRIBUTES_QUERY = "synchronizeAttributes";

        /**
         * @param synchronizeAttributes (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper synchronizeAttributesQuery(Object... synchronizeAttributes) {
            reqSpec.addQueryParam(SYNCHRONIZE_ATTRIBUTES_QUERY, synchronizeAttributes);
            return this;
        }

        public static final String HANDLE_LOGOUT_QUERY = "handleLogout";

        /**
         * @param handleLogout (Boolean)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper handleLogoutQuery(Object... handleLogout) {
            reqSpec.addQueryParam(HANDLE_LOGOUT_QUERY, handleLogout);
            return this;
        }

        public static final String LOGOUT_URL_QUERY = "logoutUrl";

        /**
         * @param logoutUrl (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper logoutUrlQuery(Object... logoutUrl) {
            reqSpec.addQueryParam(LOGOUT_URL_QUERY, logoutUrl);
            return this;
        }

        public static final String CLOCK_TOLERANCE_QUERY = "clockTolerance";

        /**
         * @param clockTolerance (Integer)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper clockToleranceQuery(Object... clockTolerance) {
            reqSpec.addQueryParam(CLOCK_TOLERANCE_QUERY, clockTolerance);
            return this;
        }

        public static final String DIGEST_METHOD_QUERY = "digestMethod";

        /**
         * @param digestMethod (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper digestMethodQuery(Object... digestMethod) {
            reqSpec.addQueryParam(DIGEST_METHOD_QUERY, digestMethod);
            return this;
        }

        public static final String SIGNATURE_METHOD_QUERY = "signatureMethod";

        /**
         * @param signatureMethod (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper signatureMethodQuery(Object... signatureMethod) {
            reqSpec.addQueryParam(SIGNATURE_METHOD_QUERY, signatureMethod);
            return this;
        }

        public static final String USER_INTERMEDIATE_PATH_QUERY = "userIntermediatePath";

        /**
         * @param userIntermediatePath (String)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper userIntermediatePathQuery(Object... userIntermediatePath) {
            reqSpec.addQueryParam(USER_INTERMEDIATE_PATH_QUERY, userIntermediatePath);
            return this;
        }

        public static final String PROPERTYLIST_QUERY = "propertylist";

        /**
         * @param propertylist (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostSamlConfigurationOper propertylistQuery(Object... propertylist) {
            reqSpec.addQueryParam(PROPERTYLIST_QUERY, propertylist);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostSamlConfigurationOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostSamlConfigurationOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
