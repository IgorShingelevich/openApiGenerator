/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api.adobe;

import com.google.gson.reflect.TypeToken;
import java.io.File;
import org.openapitools.client.model.adobe.InstallStatus;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.service.adobeService.JSON;
import static io.restassured.http.Method.*;

public class CrxApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private CrxApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static CrxApi crx(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new CrxApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                getCrxdeStatus(),
                getInstallStatus(),
                getPackageManagerServlet(),
                postPackageService(),
                postPackageServiceJson(),
                postPackageUpdate(),
                postSetPassword()
        );
    }

    public GetCrxdeStatusOper getCrxdeStatus() {
        return new GetCrxdeStatusOper(createReqSpec());
    }

    public GetInstallStatusOper getInstallStatus() {
        return new GetInstallStatusOper(createReqSpec());
    }

    public GetPackageManagerServletOper getPackageManagerServlet() {
        return new GetPackageManagerServletOper(createReqSpec());
    }

    public PostPackageServiceOper postPackageService() {
        return new PostPackageServiceOper(createReqSpec());
    }

    public PostPackageServiceJsonOper postPackageServiceJson() {
        return new PostPackageServiceJsonOper(createReqSpec());
    }

    public PostPackageUpdateOper postPackageUpdate() {
        return new PostPackageUpdateOper(createReqSpec());
    }

    public PostSetPasswordOper postSetPassword() {
        return new PostSetPasswordOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public CrxApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * return String
     */
    public static class GetCrxdeStatusOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/crx/server/crx.default/jcr:root/.1.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCrxdeStatusOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("plain/text");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /crx/server/crx.default/jcr:root/.1.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /crx/server/crx.default/jcr:root/.1.json
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCrxdeStatusOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCrxdeStatusOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return InstallStatus
     */
    public static class GetInstallStatusOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/crx/packmgr/installstatus.jsp";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetInstallStatusOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /crx/packmgr/installstatus.jsp
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /crx/packmgr/installstatus.jsp
         * @param handler handler
         * @return InstallStatus
         */
        public InstallStatus executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<InstallStatus>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetInstallStatusOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetInstallStatusOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     */
    public static class GetPackageManagerServletOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/crx/packmgr/service/script.html";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPackageManagerServletOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/html");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /crx/packmgr/service/script.html
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPackageManagerServletOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPackageManagerServletOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #cmdQuery  (required)
     * return String
     */
    public static class PostPackageServiceOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/crx/packmgr/service.jsp";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostPackageServiceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/xml");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /crx/packmgr/service.jsp
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /crx/packmgr/service.jsp
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String CMD_QUERY = "cmd";

        /**
         * @param cmd (String)  (required)
         * @return operation
         */
        public PostPackageServiceOper cmdQuery(Object... cmd) {
            reqSpec.addQueryParam(CMD_QUERY, cmd);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostPackageServiceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostPackageServiceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathPath  (required)
     * @see #cmdQuery  (required)
     * @see #groupNameQuery  (optional)
     * @see #packageNameQuery  (optional)
     * @see #packageVersionQuery  (optional)
     * @see #charsetQuery  (optional)
     * @see #forceQuery  (optional)
     * @see #recursiveQuery  (optional)
     * @see #_packageMultiPart  (optional)
     * return String
     */
    public static class PostPackageServiceJsonOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/crx/packmgr/service/.json/{path}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostPackageServiceJsonOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /crx/packmgr/service/.json/{path}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /crx/packmgr/service/.json/{path}
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String PATH_PATH = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostPackageServiceJsonOper pathPath(Object path) {
            reqSpec.addPathParam(PATH_PATH, path);
            return this;
        }

        public static final String CMD_QUERY = "cmd";

        /**
         * @param cmd (String)  (required)
         * @return operation
         */
        public PostPackageServiceJsonOper cmdQuery(Object... cmd) {
            reqSpec.addQueryParam(CMD_QUERY, cmd);
            return this;
        }

        public static final String GROUP_NAME_QUERY = "groupName";

        /**
         * @param groupName (String)  (optional)
         * @return operation
         */
        public PostPackageServiceJsonOper groupNameQuery(Object... groupName) {
            reqSpec.addQueryParam(GROUP_NAME_QUERY, groupName);
            return this;
        }

        public static final String PACKAGE_NAME_QUERY = "packageName";

        /**
         * @param packageName (String)  (optional)
         * @return operation
         */
        public PostPackageServiceJsonOper packageNameQuery(Object... packageName) {
            reqSpec.addQueryParam(PACKAGE_NAME_QUERY, packageName);
            return this;
        }

        public static final String PACKAGE_VERSION_QUERY = "packageVersion";

        /**
         * @param packageVersion (String)  (optional)
         * @return operation
         */
        public PostPackageServiceJsonOper packageVersionQuery(Object... packageVersion) {
            reqSpec.addQueryParam(PACKAGE_VERSION_QUERY, packageVersion);
            return this;
        }

        public static final String CHARSET_QUERY = "_charset_";

        /**
         * @param charset (String)  (optional)
         * @return operation
         */
        public PostPackageServiceJsonOper charsetQuery(Object... charset) {
            reqSpec.addQueryParam(CHARSET_QUERY, charset);
            return this;
        }

        public static final String FORCE_QUERY = "force";

        /**
         * @param force (Boolean)  (optional)
         * @return operation
         */
        public PostPackageServiceJsonOper forceQuery(Object... force) {
            reqSpec.addQueryParam(FORCE_QUERY, force);
            return this;
        }

        public static final String RECURSIVE_QUERY = "recursive";

        /**
         * @param recursive (Boolean)  (optional)
         * @return operation
         */
        public PostPackageServiceJsonOper recursiveQuery(Object... recursive) {
            reqSpec.addQueryParam(RECURSIVE_QUERY, recursive);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param _package (File)  (optional)
         * @return operation
         */
         public PostPackageServiceJsonOper _packageMultiPart(File _package) {
            reqSpec.addMultiPart(_package);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostPackageServiceJsonOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostPackageServiceJsonOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #groupNameQuery  (required)
     * @see #packageNameQuery  (required)
     * @see #versionQuery  (required)
     * @see #pathQuery  (required)
     * @see #filterQuery  (optional)
     * @see #charsetQuery  (optional)
     * return String
     */
    public static class PostPackageUpdateOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/crx/packmgr/update.jsp";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostPackageUpdateOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /crx/packmgr/update.jsp
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /crx/packmgr/update.jsp
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String GROUP_NAME_QUERY = "groupName";

        /**
         * @param groupName (String)  (required)
         * @return operation
         */
        public PostPackageUpdateOper groupNameQuery(Object... groupName) {
            reqSpec.addQueryParam(GROUP_NAME_QUERY, groupName);
            return this;
        }

        public static final String PACKAGE_NAME_QUERY = "packageName";

        /**
         * @param packageName (String)  (required)
         * @return operation
         */
        public PostPackageUpdateOper packageNameQuery(Object... packageName) {
            reqSpec.addQueryParam(PACKAGE_NAME_QUERY, packageName);
            return this;
        }

        public static final String VERSION_QUERY = "version";

        /**
         * @param version (String)  (required)
         * @return operation
         */
        public PostPackageUpdateOper versionQuery(Object... version) {
            reqSpec.addQueryParam(VERSION_QUERY, version);
            return this;
        }

        public static final String PATH_QUERY = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostPackageUpdateOper pathQuery(Object... path) {
            reqSpec.addQueryParam(PATH_QUERY, path);
            return this;
        }

        public static final String FILTER_QUERY = "filter";

        /**
         * @param filter (String)  (optional)
         * @return operation
         */
        public PostPackageUpdateOper filterQuery(Object... filter) {
            reqSpec.addQueryParam(FILTER_QUERY, filter);
            return this;
        }

        public static final String CHARSET_QUERY = "_charset_";

        /**
         * @param charset (String)  (optional)
         * @return operation
         */
        public PostPackageUpdateOper charsetQuery(Object... charset) {
            reqSpec.addQueryParam(CHARSET_QUERY, charset);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostPackageUpdateOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostPackageUpdateOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #oldQuery  (required)
     * @see #plainQuery  (required)
     * @see #verifyQuery  (required)
     * return String
     */
    public static class PostSetPasswordOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/crx/explorer/ui/setpassword.jsp";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostSetPasswordOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /crx/explorer/ui/setpassword.jsp
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /crx/explorer/ui/setpassword.jsp
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String OLD_QUERY = "old";

        /**
         * @param old (String)  (required)
         * @return operation
         */
        public PostSetPasswordOper oldQuery(Object... old) {
            reqSpec.addQueryParam(OLD_QUERY, old);
            return this;
        }

        public static final String PLAIN_QUERY = "plain";

        /**
         * @param plain (String)  (required)
         * @return operation
         */
        public PostSetPasswordOper plainQuery(Object... plain) {
            reqSpec.addQueryParam(PLAIN_QUERY, plain);
            return this;
        }

        public static final String VERIFY_QUERY = "verify";

        /**
         * @param verify (String)  (required)
         * @return operation
         */
        public PostSetPasswordOper verifyQuery(Object... verify) {
            reqSpec.addQueryParam(VERIFY_QUERY, verify);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostSetPasswordOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostSetPasswordOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
