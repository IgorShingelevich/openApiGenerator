/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api.adobe;

import com.google.gson.reflect.TypeToken;
import java.math.BigDecimal;
import java.io.File;
import org.openapitools.client.model.adobe.KeystoreInfo;
import org.openapitools.client.model.adobe.TruststoreInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.service.adobeService.JSON;
import static io.restassured.http.Method.*;

public class SlingApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private SlingApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static SlingApi sling(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new SlingApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                deleteAgent(),
                deleteNode(),
                getAgent(),
                getAgents(),
                getAuthorizableKeystore(),
                getKeystore(),
                getNode(),
                getPackage(),
                getPackageFilter(),
                getQuery(),
                getTruststore(),
                getTruststoreInfo(),
                postAgent(),
                postAuthorizableKeystore(),
                postAuthorizables(),
                postConfigAdobeGraniteSamlAuthenticationHandler(),
                postConfigApacheFelixJettyBasedHttpService(),
                postConfigApacheHttpComponentsProxyConfiguration(),
                postConfigApacheSlingDavExServlet(),
                postConfigApacheSlingGetServlet(),
                postConfigApacheSlingReferrerFilter(),
                postConfigProperty(),
                postNode(),
                postNodeRw(),
                postPath(),
                postQuery(),
                postTreeActivation(),
                postTruststore(),
                postTruststorePKCS12()
        );
    }

    public DeleteAgentOper deleteAgent() {
        return new DeleteAgentOper(createReqSpec());
    }

    public DeleteNodeOper deleteNode() {
        return new DeleteNodeOper(createReqSpec());
    }

    public GetAgentOper getAgent() {
        return new GetAgentOper(createReqSpec());
    }

    public GetAgentsOper getAgents() {
        return new GetAgentsOper(createReqSpec());
    }

    public GetAuthorizableKeystoreOper getAuthorizableKeystore() {
        return new GetAuthorizableKeystoreOper(createReqSpec());
    }

    public GetKeystoreOper getKeystore() {
        return new GetKeystoreOper(createReqSpec());
    }

    public GetNodeOper getNode() {
        return new GetNodeOper(createReqSpec());
    }

    public GetPackageOper getPackage() {
        return new GetPackageOper(createReqSpec());
    }

    public GetPackageFilterOper getPackageFilter() {
        return new GetPackageFilterOper(createReqSpec());
    }

    public GetQueryOper getQuery() {
        return new GetQueryOper(createReqSpec());
    }

    public GetTruststoreOper getTruststore() {
        return new GetTruststoreOper(createReqSpec());
    }

    public GetTruststoreInfoOper getTruststoreInfo() {
        return new GetTruststoreInfoOper(createReqSpec());
    }

    public PostAgentOper postAgent() {
        return new PostAgentOper(createReqSpec());
    }

    public PostAuthorizableKeystoreOper postAuthorizableKeystore() {
        return new PostAuthorizableKeystoreOper(createReqSpec());
    }

    public PostAuthorizablesOper postAuthorizables() {
        return new PostAuthorizablesOper(createReqSpec());
    }

    public PostConfigAdobeGraniteSamlAuthenticationHandlerOper postConfigAdobeGraniteSamlAuthenticationHandler() {
        return new PostConfigAdobeGraniteSamlAuthenticationHandlerOper(createReqSpec());
    }

    public PostConfigApacheFelixJettyBasedHttpServiceOper postConfigApacheFelixJettyBasedHttpService() {
        return new PostConfigApacheFelixJettyBasedHttpServiceOper(createReqSpec());
    }

    public PostConfigApacheHttpComponentsProxyConfigurationOper postConfigApacheHttpComponentsProxyConfiguration() {
        return new PostConfigApacheHttpComponentsProxyConfigurationOper(createReqSpec());
    }

    public PostConfigApacheSlingDavExServletOper postConfigApacheSlingDavExServlet() {
        return new PostConfigApacheSlingDavExServletOper(createReqSpec());
    }

    public PostConfigApacheSlingGetServletOper postConfigApacheSlingGetServlet() {
        return new PostConfigApacheSlingGetServletOper(createReqSpec());
    }

    public PostConfigApacheSlingReferrerFilterOper postConfigApacheSlingReferrerFilter() {
        return new PostConfigApacheSlingReferrerFilterOper(createReqSpec());
    }

    public PostConfigPropertyOper postConfigProperty() {
        return new PostConfigPropertyOper(createReqSpec());
    }

    public PostNodeOper postNode() {
        return new PostNodeOper(createReqSpec());
    }

    public PostNodeRwOper postNodeRw() {
        return new PostNodeRwOper(createReqSpec());
    }

    public PostPathOper postPath() {
        return new PostPathOper(createReqSpec());
    }

    public PostQueryOper postQuery() {
        return new PostQueryOper(createReqSpec());
    }

    public PostTreeActivationOper postTreeActivation() {
        return new PostTreeActivationOper(createReqSpec());
    }

    public PostTruststoreOper postTruststore() {
        return new PostTruststoreOper(createReqSpec());
    }

    public PostTruststorePKCS12Oper postTruststorePKCS12() {
        return new PostTruststorePKCS12Oper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public SlingApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #runmodePath  (required)
     * @see #namePath  (required)
     */
    public static class DeleteAgentOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/etc/replication/agents.{runmode}/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteAgentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /etc/replication/agents.{runmode}/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String RUNMODE_PATH = "runmode";

        /**
         * @param runmode (String)  (required)
         * @return operation
         */
        public DeleteAgentOper runmodePath(Object runmode) {
            reqSpec.addPathParam(RUNMODE_PATH, runmode);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public DeleteAgentOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteAgentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteAgentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathPath  (required)
     * @see #namePath  (required)
     */
    public static class DeleteNodeOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/{path}/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteNodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /{path}/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String PATH_PATH = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public DeleteNodeOper pathPath(Object path) {
            reqSpec.addPathParam(PATH_PATH, path);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public DeleteNodeOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteNodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteNodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #runmodePath  (required)
     * @see #namePath  (required)
     */
    public static class GetAgentOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/etc/replication/agents.{runmode}/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAgentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /etc/replication/agents.{runmode}/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String RUNMODE_PATH = "runmode";

        /**
         * @param runmode (String)  (required)
         * @return operation
         */
        public GetAgentOper runmodePath(Object runmode) {
            reqSpec.addPathParam(RUNMODE_PATH, runmode);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public GetAgentOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAgentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAgentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #runmodePath  (required)
     * return String
     */
    public static class GetAgentsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/etc/replication/agents.{runmode}.-1.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAgentsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /etc/replication/agents.{runmode}.-1.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /etc/replication/agents.{runmode}.-1.json
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String RUNMODE_PATH = "runmode";

        /**
         * @param runmode (String)  (required)
         * @return operation
         */
        public GetAgentsOper runmodePath(Object runmode) {
            reqSpec.addPathParam(RUNMODE_PATH, runmode);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAgentsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAgentsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #intermediatePathPath  (required)
     * @see #authorizableIdPath  (required)
     * return KeystoreInfo
     */
    public static class GetAuthorizableKeystoreOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/{intermediatePath}/{authorizableId}.ks.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAuthorizableKeystoreOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /{intermediatePath}/{authorizableId}.ks.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /{intermediatePath}/{authorizableId}.ks.json
         * @param handler handler
         * @return KeystoreInfo
         */
        public KeystoreInfo executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<KeystoreInfo>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INTERMEDIATE_PATH_PATH = "intermediatePath";

        /**
         * @param intermediatePath (String)  (required)
         * @return operation
         */
        public GetAuthorizableKeystoreOper intermediatePathPath(Object intermediatePath) {
            reqSpec.addPathParam(INTERMEDIATE_PATH_PATH, intermediatePath);
            return this;
        }

        public static final String AUTHORIZABLE_ID_PATH = "authorizableId";

        /**
         * @param authorizableId (String)  (required)
         * @return operation
         */
        public GetAuthorizableKeystoreOper authorizableIdPath(Object authorizableId) {
            reqSpec.addPathParam(AUTHORIZABLE_ID_PATH, authorizableId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAuthorizableKeystoreOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAuthorizableKeystoreOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #intermediatePathPath  (required)
     * @see #authorizableIdPath  (required)
     * return File
     */
    public static class GetKeystoreOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/{intermediatePath}/{authorizableId}/keystore/store.p12";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetKeystoreOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /{intermediatePath}/{authorizableId}/keystore/store.p12
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /{intermediatePath}/{authorizableId}/keystore/store.p12
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<File>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INTERMEDIATE_PATH_PATH = "intermediatePath";

        /**
         * @param intermediatePath (String)  (required)
         * @return operation
         */
        public GetKeystoreOper intermediatePathPath(Object intermediatePath) {
            reqSpec.addPathParam(INTERMEDIATE_PATH_PATH, intermediatePath);
            return this;
        }

        public static final String AUTHORIZABLE_ID_PATH = "authorizableId";

        /**
         * @param authorizableId (String)  (required)
         * @return operation
         */
        public GetKeystoreOper authorizableIdPath(Object authorizableId) {
            reqSpec.addPathParam(AUTHORIZABLE_ID_PATH, authorizableId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetKeystoreOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetKeystoreOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathPath  (required)
     * @see #namePath  (required)
     */
    public static class GetNodeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/{path}/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetNodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /{path}/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String PATH_PATH = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public GetNodeOper pathPath(Object path) {
            reqSpec.addPathParam(PATH_PATH, path);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public GetNodeOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetNodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetNodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #groupPath  (required)
     * @see #namePath  (required)
     * @see #versionPath  (required)
     * return File
     */
    public static class GetPackageOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/etc/packages/{group}/{name}-{version}.zip";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPackageOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /etc/packages/{group}/{name}-{version}.zip
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /etc/packages/{group}/{name}-{version}.zip
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<File>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String GROUP_PATH = "group";

        /**
         * @param group (String)  (required)
         * @return operation
         */
        public GetPackageOper groupPath(Object group) {
            reqSpec.addPathParam(GROUP_PATH, group);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public GetPackageOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        public static final String VERSION_PATH = "version";

        /**
         * @param version (String)  (required)
         * @return operation
         */
        public GetPackageOper versionPath(Object version) {
            reqSpec.addPathParam(VERSION_PATH, version);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPackageOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPackageOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #groupPath  (required)
     * @see #namePath  (required)
     * @see #versionPath  (required)
     * return String
     */
    public static class GetPackageFilterOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPackageFilterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String GROUP_PATH = "group";

        /**
         * @param group (String)  (required)
         * @return operation
         */
        public GetPackageFilterOper groupPath(Object group) {
            reqSpec.addPathParam(GROUP_PATH, group);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public GetPackageFilterOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        public static final String VERSION_PATH = "version";

        /**
         * @param version (String)  (required)
         * @return operation
         */
        public GetPackageFilterOper versionPath(Object version) {
            reqSpec.addPathParam(VERSION_PATH, version);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPackageFilterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPackageFilterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathQuery  (required)
     * @see #pLimitQuery  (required)
     * @see #_1propertyQuery  (required)
     * @see #_1propertyValueQuery  (required)
     * return String
     */
    public static class GetQueryOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/bin/querybuilder.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetQueryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /bin/querybuilder.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /bin/querybuilder.json
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String PATH_QUERY = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public GetQueryOper pathQuery(Object... path) {
            reqSpec.addQueryParam(PATH_QUERY, path);
            return this;
        }

        public static final String P_LIMIT_QUERY = "p.limit";

        /**
         * @param pLimit (BigDecimal)  (required)
         * @return operation
         */
        public GetQueryOper pLimitQuery(Object... pLimit) {
            reqSpec.addQueryParam(P_LIMIT_QUERY, pLimit);
            return this;
        }

        public static final String _1PROPERTY_QUERY = "1_property";

        /**
         * @param _1property (String)  (required)
         * @return operation
         */
        public GetQueryOper _1propertyQuery(Object... _1property) {
            reqSpec.addQueryParam(_1PROPERTY_QUERY, _1property);
            return this;
        }

        public static final String _1PROPERTY_VALUE_QUERY = "1_property.value";

        /**
         * @param _1propertyValue (String)  (required)
         * @return operation
         */
        public GetQueryOper _1propertyValueQuery(Object... _1propertyValue) {
            reqSpec.addQueryParam(_1PROPERTY_VALUE_QUERY, _1propertyValue);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetQueryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetQueryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return File
     */
    public static class GetTruststoreOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/etc/truststore/truststore.p12";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTruststoreOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /etc/truststore/truststore.p12
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /etc/truststore/truststore.p12
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<File>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTruststoreOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTruststoreOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return TruststoreInfo
     */
    public static class GetTruststoreInfoOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/libs/granite/security/truststore.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTruststoreInfoOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /libs/granite/security/truststore.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /libs/granite/security/truststore.json
         * @param handler handler
         * @return TruststoreInfo
         */
        public TruststoreInfo executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<TruststoreInfo>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTruststoreInfoOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTruststoreInfoOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #runmodePath  (required)
     * @see #namePath  (required)
     * @see #jcrColonContentCqColonDistributeQuery  (optional)
     * @see #jcrColonContentCqColonDistributeAtTypeHintQuery  (optional)
     * @see #jcrColonContentCqColonNameQuery  (optional)
     * @see #jcrColonContentCqColonTemplateQuery  (optional)
     * @see #jcrColonContentEnabledQuery  (optional)
     * @see #jcrColonContentJcrColonDescriptionQuery  (optional)
     * @see #jcrColonContentJcrColonLastModifiedQuery  (optional)
     * @see #jcrColonContentJcrColonLastModifiedByQuery  (optional)
     * @see #jcrColonContentJcrColonMixinTypesQuery  (optional)
     * @see #jcrColonContentJcrColonTitleQuery  (optional)
     * @see #jcrColonContentLogLevelQuery  (optional)
     * @see #jcrColonContentNoStatusUpdateQuery  (optional)
     * @see #jcrColonContentNoVersioningQuery  (optional)
     * @see #jcrColonContentProtocolConnectTimeoutQuery  (optional)
     * @see #jcrColonContentProtocolHTTPConnectionClosedQuery  (optional)
     * @see #jcrColonContentProtocolHTTPExpiredQuery  (optional)
     * @see #jcrColonContentProtocolHTTPHeadersQuery  (optional)
     * @see #jcrColonContentProtocolHTTPHeadersAtTypeHintQuery  (optional)
     * @see #jcrColonContentProtocolHTTPMethodQuery  (optional)
     * @see #jcrColonContentProtocolHTTPSRelaxedQuery  (optional)
     * @see #jcrColonContentProtocolInterfaceQuery  (optional)
     * @see #jcrColonContentProtocolSocketTimeoutQuery  (optional)
     * @see #jcrColonContentProtocolVersionQuery  (optional)
     * @see #jcrColonContentProxyNTLMDomainQuery  (optional)
     * @see #jcrColonContentProxyNTLMHostQuery  (optional)
     * @see #jcrColonContentProxyHostQuery  (optional)
     * @see #jcrColonContentProxyPasswordQuery  (optional)
     * @see #jcrColonContentProxyPortQuery  (optional)
     * @see #jcrColonContentProxyUserQuery  (optional)
     * @see #jcrColonContentQueueBatchMaxSizeQuery  (optional)
     * @see #jcrColonContentQueueBatchModeQuery  (optional)
     * @see #jcrColonContentQueueBatchWaitTimeQuery  (optional)
     * @see #jcrColonContentRetryDelayQuery  (optional)
     * @see #jcrColonContentReverseReplicationQuery  (optional)
     * @see #jcrColonContentSerializationTypeQuery  (optional)
     * @see #jcrColonContentSlingColonResourceTypeQuery  (optional)
     * @see #jcrColonContentSslQuery  (optional)
     * @see #jcrColonContentTransportNTLMDomainQuery  (optional)
     * @see #jcrColonContentTransportNTLMHostQuery  (optional)
     * @see #jcrColonContentTransportPasswordQuery  (optional)
     * @see #jcrColonContentTransportUriQuery  (optional)
     * @see #jcrColonContentTransportUserQuery  (optional)
     * @see #jcrColonContentTriggerDistributeQuery  (optional)
     * @see #jcrColonContentTriggerModifiedQuery  (optional)
     * @see #jcrColonContentTriggerOnOffTimeQuery  (optional)
     * @see #jcrColonContentTriggerReceiveQuery  (optional)
     * @see #jcrColonContentTriggerSpecificQuery  (optional)
     * @see #jcrColonContentUserIdQuery  (optional)
     * @see #jcrColonPrimaryTypeQuery  (optional)
     * @see #colonOperationQuery  (optional)
     */
    public static class PostAgentOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/etc/replication/agents.{runmode}/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostAgentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /etc/replication/agents.{runmode}/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String RUNMODE_PATH = "runmode";

        /**
         * @param runmode (String)  (required)
         * @return operation
         */
        public PostAgentOper runmodePath(Object runmode) {
            reqSpec.addPathParam(RUNMODE_PATH, runmode);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public PostAgentOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        public static final String JCR_COLON_CONTENT_CQ_COLON_DISTRIBUTE_QUERY = "jcr:content/cq:distribute";

        /**
         * @param jcrColonContentCqColonDistribute (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentCqColonDistributeQuery(Object... jcrColonContentCqColonDistribute) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_CQ_COLON_DISTRIBUTE_QUERY, jcrColonContentCqColonDistribute);
            return this;
        }

        public static final String JCR_COLON_CONTENT_CQ_COLON_DISTRIBUTE_AT_TYPE_HINT_QUERY = "jcr:content/cq:distribute@TypeHint";

        /**
         * @param jcrColonContentCqColonDistributeAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentCqColonDistributeAtTypeHintQuery(Object... jcrColonContentCqColonDistributeAtTypeHint) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_CQ_COLON_DISTRIBUTE_AT_TYPE_HINT_QUERY, jcrColonContentCqColonDistributeAtTypeHint);
            return this;
        }

        public static final String JCR_COLON_CONTENT_CQ_COLON_NAME_QUERY = "jcr:content/cq:name";

        /**
         * @param jcrColonContentCqColonName (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentCqColonNameQuery(Object... jcrColonContentCqColonName) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_CQ_COLON_NAME_QUERY, jcrColonContentCqColonName);
            return this;
        }

        public static final String JCR_COLON_CONTENT_CQ_COLON_TEMPLATE_QUERY = "jcr:content/cq:template";

        /**
         * @param jcrColonContentCqColonTemplate (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentCqColonTemplateQuery(Object... jcrColonContentCqColonTemplate) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_CQ_COLON_TEMPLATE_QUERY, jcrColonContentCqColonTemplate);
            return this;
        }

        public static final String JCR_COLON_CONTENT_ENABLED_QUERY = "jcr:content/enabled";

        /**
         * @param jcrColonContentEnabled (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentEnabledQuery(Object... jcrColonContentEnabled) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_ENABLED_QUERY, jcrColonContentEnabled);
            return this;
        }

        public static final String JCR_COLON_CONTENT_JCR_COLON_DESCRIPTION_QUERY = "jcr:content/jcr:description";

        /**
         * @param jcrColonContentJcrColonDescription (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentJcrColonDescriptionQuery(Object... jcrColonContentJcrColonDescription) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_JCR_COLON_DESCRIPTION_QUERY, jcrColonContentJcrColonDescription);
            return this;
        }

        public static final String JCR_COLON_CONTENT_JCR_COLON_LAST_MODIFIED_QUERY = "jcr:content/jcr:lastModified";

        /**
         * @param jcrColonContentJcrColonLastModified (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentJcrColonLastModifiedQuery(Object... jcrColonContentJcrColonLastModified) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_JCR_COLON_LAST_MODIFIED_QUERY, jcrColonContentJcrColonLastModified);
            return this;
        }

        public static final String JCR_COLON_CONTENT_JCR_COLON_LAST_MODIFIED_BY_QUERY = "jcr:content/jcr:lastModifiedBy";

        /**
         * @param jcrColonContentJcrColonLastModifiedBy (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentJcrColonLastModifiedByQuery(Object... jcrColonContentJcrColonLastModifiedBy) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_JCR_COLON_LAST_MODIFIED_BY_QUERY, jcrColonContentJcrColonLastModifiedBy);
            return this;
        }

        public static final String JCR_COLON_CONTENT_JCR_COLON_MIXIN_TYPES_QUERY = "jcr:content/jcr:mixinTypes";

        /**
         * @param jcrColonContentJcrColonMixinTypes (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentJcrColonMixinTypesQuery(Object... jcrColonContentJcrColonMixinTypes) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_JCR_COLON_MIXIN_TYPES_QUERY, jcrColonContentJcrColonMixinTypes);
            return this;
        }

        public static final String JCR_COLON_CONTENT_JCR_COLON_TITLE_QUERY = "jcr:content/jcr:title";

        /**
         * @param jcrColonContentJcrColonTitle (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentJcrColonTitleQuery(Object... jcrColonContentJcrColonTitle) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_JCR_COLON_TITLE_QUERY, jcrColonContentJcrColonTitle);
            return this;
        }

        public static final String JCR_COLON_CONTENT_LOG_LEVEL_QUERY = "jcr:content/logLevel";

        /**
         * @param jcrColonContentLogLevel (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentLogLevelQuery(Object... jcrColonContentLogLevel) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_LOG_LEVEL_QUERY, jcrColonContentLogLevel);
            return this;
        }

        public static final String JCR_COLON_CONTENT_NO_STATUS_UPDATE_QUERY = "jcr:content/noStatusUpdate";

        /**
         * @param jcrColonContentNoStatusUpdate (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentNoStatusUpdateQuery(Object... jcrColonContentNoStatusUpdate) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_NO_STATUS_UPDATE_QUERY, jcrColonContentNoStatusUpdate);
            return this;
        }

        public static final String JCR_COLON_CONTENT_NO_VERSIONING_QUERY = "jcr:content/noVersioning";

        /**
         * @param jcrColonContentNoVersioning (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentNoVersioningQuery(Object... jcrColonContentNoVersioning) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_NO_VERSIONING_QUERY, jcrColonContentNoVersioning);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_CONNECT_TIMEOUT_QUERY = "jcr:content/protocolConnectTimeout";

        /**
         * @param jcrColonContentProtocolConnectTimeout (BigDecimal)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolConnectTimeoutQuery(Object... jcrColonContentProtocolConnectTimeout) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_CONNECT_TIMEOUT_QUERY, jcrColonContentProtocolConnectTimeout);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_CONNECTION_CLOSED_QUERY = "jcr:content/protocolHTTPConnectionClosed";

        /**
         * @param jcrColonContentProtocolHTTPConnectionClosed (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolHTTPConnectionClosedQuery(Object... jcrColonContentProtocolHTTPConnectionClosed) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_CONNECTION_CLOSED_QUERY, jcrColonContentProtocolHTTPConnectionClosed);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_EXPIRED_QUERY = "jcr:content/protocolHTTPExpired";

        /**
         * @param jcrColonContentProtocolHTTPExpired (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolHTTPExpiredQuery(Object... jcrColonContentProtocolHTTPExpired) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_EXPIRED_QUERY, jcrColonContentProtocolHTTPExpired);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_HEADERS_QUERY = "jcr:content/protocolHTTPHeaders";

        /**
         * @param jcrColonContentProtocolHTTPHeaders (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolHTTPHeadersQuery(Object... jcrColonContentProtocolHTTPHeaders) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_HEADERS_QUERY, jcrColonContentProtocolHTTPHeaders);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_HEADERS_AT_TYPE_HINT_QUERY = "jcr:content/protocolHTTPHeaders@TypeHint";

        /**
         * @param jcrColonContentProtocolHTTPHeadersAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolHTTPHeadersAtTypeHintQuery(Object... jcrColonContentProtocolHTTPHeadersAtTypeHint) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_HEADERS_AT_TYPE_HINT_QUERY, jcrColonContentProtocolHTTPHeadersAtTypeHint);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_METHOD_QUERY = "jcr:content/protocolHTTPMethod";

        /**
         * @param jcrColonContentProtocolHTTPMethod (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolHTTPMethodQuery(Object... jcrColonContentProtocolHTTPMethod) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_METHOD_QUERY, jcrColonContentProtocolHTTPMethod);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_S_RELAXED_QUERY = "jcr:content/protocolHTTPSRelaxed";

        /**
         * @param jcrColonContentProtocolHTTPSRelaxed (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolHTTPSRelaxedQuery(Object... jcrColonContentProtocolHTTPSRelaxed) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_H_T_T_P_S_RELAXED_QUERY, jcrColonContentProtocolHTTPSRelaxed);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_INTERFACE_QUERY = "jcr:content/protocolInterface";

        /**
         * @param jcrColonContentProtocolInterface (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolInterfaceQuery(Object... jcrColonContentProtocolInterface) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_INTERFACE_QUERY, jcrColonContentProtocolInterface);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_SOCKET_TIMEOUT_QUERY = "jcr:content/protocolSocketTimeout";

        /**
         * @param jcrColonContentProtocolSocketTimeout (BigDecimal)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolSocketTimeoutQuery(Object... jcrColonContentProtocolSocketTimeout) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_SOCKET_TIMEOUT_QUERY, jcrColonContentProtocolSocketTimeout);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROTOCOL_VERSION_QUERY = "jcr:content/protocolVersion";

        /**
         * @param jcrColonContentProtocolVersion (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProtocolVersionQuery(Object... jcrColonContentProtocolVersion) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROTOCOL_VERSION_QUERY, jcrColonContentProtocolVersion);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROXY_N_T_L_M_DOMAIN_QUERY = "jcr:content/proxyNTLMDomain";

        /**
         * @param jcrColonContentProxyNTLMDomain (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProxyNTLMDomainQuery(Object... jcrColonContentProxyNTLMDomain) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROXY_N_T_L_M_DOMAIN_QUERY, jcrColonContentProxyNTLMDomain);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROXY_N_T_L_M_HOST_QUERY = "jcr:content/proxyNTLMHost";

        /**
         * @param jcrColonContentProxyNTLMHost (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProxyNTLMHostQuery(Object... jcrColonContentProxyNTLMHost) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROXY_N_T_L_M_HOST_QUERY, jcrColonContentProxyNTLMHost);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROXY_HOST_QUERY = "jcr:content/proxyHost";

        /**
         * @param jcrColonContentProxyHost (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProxyHostQuery(Object... jcrColonContentProxyHost) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROXY_HOST_QUERY, jcrColonContentProxyHost);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROXY_PASSWORD_QUERY = "jcr:content/proxyPassword";

        /**
         * @param jcrColonContentProxyPassword (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProxyPasswordQuery(Object... jcrColonContentProxyPassword) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROXY_PASSWORD_QUERY, jcrColonContentProxyPassword);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROXY_PORT_QUERY = "jcr:content/proxyPort";

        /**
         * @param jcrColonContentProxyPort (BigDecimal)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProxyPortQuery(Object... jcrColonContentProxyPort) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROXY_PORT_QUERY, jcrColonContentProxyPort);
            return this;
        }

        public static final String JCR_COLON_CONTENT_PROXY_USER_QUERY = "jcr:content/proxyUser";

        /**
         * @param jcrColonContentProxyUser (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentProxyUserQuery(Object... jcrColonContentProxyUser) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_PROXY_USER_QUERY, jcrColonContentProxyUser);
            return this;
        }

        public static final String JCR_COLON_CONTENT_QUEUE_BATCH_MAX_SIZE_QUERY = "jcr:content/queueBatchMaxSize";

        /**
         * @param jcrColonContentQueueBatchMaxSize (BigDecimal)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentQueueBatchMaxSizeQuery(Object... jcrColonContentQueueBatchMaxSize) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_QUEUE_BATCH_MAX_SIZE_QUERY, jcrColonContentQueueBatchMaxSize);
            return this;
        }

        public static final String JCR_COLON_CONTENT_QUEUE_BATCH_MODE_QUERY = "jcr:content/queueBatchMode";

        /**
         * @param jcrColonContentQueueBatchMode (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentQueueBatchModeQuery(Object... jcrColonContentQueueBatchMode) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_QUEUE_BATCH_MODE_QUERY, jcrColonContentQueueBatchMode);
            return this;
        }

        public static final String JCR_COLON_CONTENT_QUEUE_BATCH_WAIT_TIME_QUERY = "jcr:content/queueBatchWaitTime";

        /**
         * @param jcrColonContentQueueBatchWaitTime (BigDecimal)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentQueueBatchWaitTimeQuery(Object... jcrColonContentQueueBatchWaitTime) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_QUEUE_BATCH_WAIT_TIME_QUERY, jcrColonContentQueueBatchWaitTime);
            return this;
        }

        public static final String JCR_COLON_CONTENT_RETRY_DELAY_QUERY = "jcr:content/retryDelay";

        /**
         * @param jcrColonContentRetryDelay (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentRetryDelayQuery(Object... jcrColonContentRetryDelay) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_RETRY_DELAY_QUERY, jcrColonContentRetryDelay);
            return this;
        }

        public static final String JCR_COLON_CONTENT_REVERSE_REPLICATION_QUERY = "jcr:content/reverseReplication";

        /**
         * @param jcrColonContentReverseReplication (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentReverseReplicationQuery(Object... jcrColonContentReverseReplication) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_REVERSE_REPLICATION_QUERY, jcrColonContentReverseReplication);
            return this;
        }

        public static final String JCR_COLON_CONTENT_SERIALIZATION_TYPE_QUERY = "jcr:content/serializationType";

        /**
         * @param jcrColonContentSerializationType (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentSerializationTypeQuery(Object... jcrColonContentSerializationType) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_SERIALIZATION_TYPE_QUERY, jcrColonContentSerializationType);
            return this;
        }

        public static final String JCR_COLON_CONTENT_SLING_COLON_RESOURCE_TYPE_QUERY = "jcr:content/sling:resourceType";

        /**
         * @param jcrColonContentSlingColonResourceType (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentSlingColonResourceTypeQuery(Object... jcrColonContentSlingColonResourceType) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_SLING_COLON_RESOURCE_TYPE_QUERY, jcrColonContentSlingColonResourceType);
            return this;
        }

        public static final String JCR_COLON_CONTENT_SSL_QUERY = "jcr:content/ssl";

        /**
         * @param jcrColonContentSsl (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentSslQuery(Object... jcrColonContentSsl) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_SSL_QUERY, jcrColonContentSsl);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRANSPORT_N_T_L_M_DOMAIN_QUERY = "jcr:content/transportNTLMDomain";

        /**
         * @param jcrColonContentTransportNTLMDomain (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTransportNTLMDomainQuery(Object... jcrColonContentTransportNTLMDomain) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRANSPORT_N_T_L_M_DOMAIN_QUERY, jcrColonContentTransportNTLMDomain);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRANSPORT_N_T_L_M_HOST_QUERY = "jcr:content/transportNTLMHost";

        /**
         * @param jcrColonContentTransportNTLMHost (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTransportNTLMHostQuery(Object... jcrColonContentTransportNTLMHost) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRANSPORT_N_T_L_M_HOST_QUERY, jcrColonContentTransportNTLMHost);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRANSPORT_PASSWORD_QUERY = "jcr:content/transportPassword";

        /**
         * @param jcrColonContentTransportPassword (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTransportPasswordQuery(Object... jcrColonContentTransportPassword) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRANSPORT_PASSWORD_QUERY, jcrColonContentTransportPassword);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRANSPORT_URI_QUERY = "jcr:content/transportUri";

        /**
         * @param jcrColonContentTransportUri (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTransportUriQuery(Object... jcrColonContentTransportUri) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRANSPORT_URI_QUERY, jcrColonContentTransportUri);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRANSPORT_USER_QUERY = "jcr:content/transportUser";

        /**
         * @param jcrColonContentTransportUser (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTransportUserQuery(Object... jcrColonContentTransportUser) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRANSPORT_USER_QUERY, jcrColonContentTransportUser);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRIGGER_DISTRIBUTE_QUERY = "jcr:content/triggerDistribute";

        /**
         * @param jcrColonContentTriggerDistribute (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTriggerDistributeQuery(Object... jcrColonContentTriggerDistribute) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRIGGER_DISTRIBUTE_QUERY, jcrColonContentTriggerDistribute);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRIGGER_MODIFIED_QUERY = "jcr:content/triggerModified";

        /**
         * @param jcrColonContentTriggerModified (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTriggerModifiedQuery(Object... jcrColonContentTriggerModified) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRIGGER_MODIFIED_QUERY, jcrColonContentTriggerModified);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRIGGER_ON_OFF_TIME_QUERY = "jcr:content/triggerOnOffTime";

        /**
         * @param jcrColonContentTriggerOnOffTime (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTriggerOnOffTimeQuery(Object... jcrColonContentTriggerOnOffTime) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRIGGER_ON_OFF_TIME_QUERY, jcrColonContentTriggerOnOffTime);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRIGGER_RECEIVE_QUERY = "jcr:content/triggerReceive";

        /**
         * @param jcrColonContentTriggerReceive (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTriggerReceiveQuery(Object... jcrColonContentTriggerReceive) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRIGGER_RECEIVE_QUERY, jcrColonContentTriggerReceive);
            return this;
        }

        public static final String JCR_COLON_CONTENT_TRIGGER_SPECIFIC_QUERY = "jcr:content/triggerSpecific";

        /**
         * @param jcrColonContentTriggerSpecific (Boolean)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentTriggerSpecificQuery(Object... jcrColonContentTriggerSpecific) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_TRIGGER_SPECIFIC_QUERY, jcrColonContentTriggerSpecific);
            return this;
        }

        public static final String JCR_COLON_CONTENT_USER_ID_QUERY = "jcr:content/userId";

        /**
         * @param jcrColonContentUserId (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonContentUserIdQuery(Object... jcrColonContentUserId) {
            reqSpec.addQueryParam(JCR_COLON_CONTENT_USER_ID_QUERY, jcrColonContentUserId);
            return this;
        }

        public static final String JCR_COLON_PRIMARY_TYPE_QUERY = "jcr:primaryType";

        /**
         * @param jcrColonPrimaryType (String)  (optional)
         * @return operation
         */
        public PostAgentOper jcrColonPrimaryTypeQuery(Object... jcrColonPrimaryType) {
            reqSpec.addQueryParam(JCR_COLON_PRIMARY_TYPE_QUERY, jcrColonPrimaryType);
            return this;
        }

        public static final String COLON_OPERATION_QUERY = ":operation";

        /**
         * @param colonOperation (String)  (optional)
         * @return operation
         */
        public PostAgentOper colonOperationQuery(Object... colonOperation) {
            reqSpec.addQueryParam(COLON_OPERATION_QUERY, colonOperation);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostAgentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostAgentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #intermediatePathPath  (required)
     * @see #authorizableIdPath  (required)
     * @see #colonOperationQuery  (optional)
     * @see #currentPasswordQuery  (optional)
     * @see #newPasswordQuery  (optional)
     * @see #rePasswordQuery  (optional)
     * @see #keyPasswordQuery  (optional)
     * @see #keyStorePassQuery  (optional)
     * @see #aliasQuery  (optional)
     * @see #newAliasQuery  (optional)
     * @see #removeAliasQuery  (optional)
     * @see #certChainMultiPart  (optional)
     * @see #keyStoreMultiPart  (optional)
     * @see #pkMultiPart  (optional)
     * return KeystoreInfo
     */
    public static class PostAuthorizableKeystoreOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/{intermediatePath}/{authorizableId}.ks.html";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostAuthorizableKeystoreOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /{intermediatePath}/{authorizableId}.ks.html
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /{intermediatePath}/{authorizableId}.ks.html
         * @param handler handler
         * @return KeystoreInfo
         */
        public KeystoreInfo executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<KeystoreInfo>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INTERMEDIATE_PATH_PATH = "intermediatePath";

        /**
         * @param intermediatePath (String)  (required)
         * @return operation
         */
        public PostAuthorizableKeystoreOper intermediatePathPath(Object intermediatePath) {
            reqSpec.addPathParam(INTERMEDIATE_PATH_PATH, intermediatePath);
            return this;
        }

        public static final String AUTHORIZABLE_ID_PATH = "authorizableId";

        /**
         * @param authorizableId (String)  (required)
         * @return operation
         */
        public PostAuthorizableKeystoreOper authorizableIdPath(Object authorizableId) {
            reqSpec.addPathParam(AUTHORIZABLE_ID_PATH, authorizableId);
            return this;
        }

        public static final String COLON_OPERATION_QUERY = ":operation";

        /**
         * @param colonOperation (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper colonOperationQuery(Object... colonOperation) {
            reqSpec.addQueryParam(COLON_OPERATION_QUERY, colonOperation);
            return this;
        }

        public static final String CURRENT_PASSWORD_QUERY = "currentPassword";

        /**
         * @param currentPassword (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper currentPasswordQuery(Object... currentPassword) {
            reqSpec.addQueryParam(CURRENT_PASSWORD_QUERY, currentPassword);
            return this;
        }

        public static final String NEW_PASSWORD_QUERY = "newPassword";

        /**
         * @param newPassword (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper newPasswordQuery(Object... newPassword) {
            reqSpec.addQueryParam(NEW_PASSWORD_QUERY, newPassword);
            return this;
        }

        public static final String RE_PASSWORD_QUERY = "rePassword";

        /**
         * @param rePassword (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper rePasswordQuery(Object... rePassword) {
            reqSpec.addQueryParam(RE_PASSWORD_QUERY, rePassword);
            return this;
        }

        public static final String KEY_PASSWORD_QUERY = "keyPassword";

        /**
         * @param keyPassword (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper keyPasswordQuery(Object... keyPassword) {
            reqSpec.addQueryParam(KEY_PASSWORD_QUERY, keyPassword);
            return this;
        }

        public static final String KEY_STORE_PASS_QUERY = "keyStorePass";

        /**
         * @param keyStorePass (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper keyStorePassQuery(Object... keyStorePass) {
            reqSpec.addQueryParam(KEY_STORE_PASS_QUERY, keyStorePass);
            return this;
        }

        public static final String ALIAS_QUERY = "alias";

        /**
         * @param alias (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper aliasQuery(Object... alias) {
            reqSpec.addQueryParam(ALIAS_QUERY, alias);
            return this;
        }

        public static final String NEW_ALIAS_QUERY = "newAlias";

        /**
         * @param newAlias (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper newAliasQuery(Object... newAlias) {
            reqSpec.addQueryParam(NEW_ALIAS_QUERY, newAlias);
            return this;
        }

        public static final String REMOVE_ALIAS_QUERY = "removeAlias";

        /**
         * @param removeAlias (String)  (optional)
         * @return operation
         */
        public PostAuthorizableKeystoreOper removeAliasQuery(Object... removeAlias) {
            reqSpec.addQueryParam(REMOVE_ALIAS_QUERY, removeAlias);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param certChain (File)  (optional)
         * @return operation
         */
         public PostAuthorizableKeystoreOper certChainMultiPart(File certChain) {
            reqSpec.addMultiPart(certChain);
            return this;
         }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param keyStore (File)  (optional)
         * @return operation
         */
         public PostAuthorizableKeystoreOper keyStoreMultiPart(File keyStore) {
            reqSpec.addMultiPart(keyStore);
            return this;
         }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param pk (File)  (optional)
         * @return operation
         */
         public PostAuthorizableKeystoreOper pkMultiPart(File pk) {
            reqSpec.addMultiPart(pk);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostAuthorizableKeystoreOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostAuthorizableKeystoreOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #authorizableIdQuery  (required)
     * @see #intermediatePathQuery  (required)
     * @see #createUserQuery  (optional)
     * @see #createGroupQuery  (optional)
     * @see #repColonPasswordQuery  (optional)
     * @see #profileGivenNameQuery  (optional)
     * return String
     */
    public static class PostAuthorizablesOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/libs/granite/security/post/authorizables";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostAuthorizablesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/html");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /libs/granite/security/post/authorizables
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /libs/granite/security/post/authorizables
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String AUTHORIZABLE_ID_QUERY = "authorizableId";

        /**
         * @param authorizableId (String)  (required)
         * @return operation
         */
        public PostAuthorizablesOper authorizableIdQuery(Object... authorizableId) {
            reqSpec.addQueryParam(AUTHORIZABLE_ID_QUERY, authorizableId);
            return this;
        }

        public static final String INTERMEDIATE_PATH_QUERY = "intermediatePath";

        /**
         * @param intermediatePath (String)  (required)
         * @return operation
         */
        public PostAuthorizablesOper intermediatePathQuery(Object... intermediatePath) {
            reqSpec.addQueryParam(INTERMEDIATE_PATH_QUERY, intermediatePath);
            return this;
        }

        public static final String CREATE_USER_QUERY = "createUser";

        /**
         * @param createUser (String)  (optional)
         * @return operation
         */
        public PostAuthorizablesOper createUserQuery(Object... createUser) {
            reqSpec.addQueryParam(CREATE_USER_QUERY, createUser);
            return this;
        }

        public static final String CREATE_GROUP_QUERY = "createGroup";

        /**
         * @param createGroup (String)  (optional)
         * @return operation
         */
        public PostAuthorizablesOper createGroupQuery(Object... createGroup) {
            reqSpec.addQueryParam(CREATE_GROUP_QUERY, createGroup);
            return this;
        }

        public static final String REP_COLON_PASSWORD_QUERY = "rep:password";

        /**
         * @param repColonPassword (String)  (optional)
         * @return operation
         */
        public PostAuthorizablesOper repColonPasswordQuery(Object... repColonPassword) {
            reqSpec.addQueryParam(REP_COLON_PASSWORD_QUERY, repColonPassword);
            return this;
        }

        public static final String PROFILE_GIVEN_NAME_QUERY = "profile/givenName";

        /**
         * @param profileGivenName (String)  (optional)
         * @return operation
         */
        public PostAuthorizablesOper profileGivenNameQuery(Object... profileGivenName) {
            reqSpec.addQueryParam(PROFILE_GIVEN_NAME_QUERY, profileGivenName);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostAuthorizablesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostAuthorizablesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #keyStorePasswordQuery  (optional)
     * @see #keyStorePasswordAtTypeHintQuery  (optional)
     * @see #serviceRankingQuery  (optional)
     * @see #serviceRankingAtTypeHintQuery  (optional)
     * @see #idpHttpRedirectQuery  (optional)
     * @see #idpHttpRedirectAtTypeHintQuery  (optional)
     * @see #createUserQuery  (optional)
     * @see #createUserAtTypeHintQuery  (optional)
     * @see #defaultRedirectUrlQuery  (optional)
     * @see #defaultRedirectUrlAtTypeHintQuery  (optional)
     * @see #userIDAttributeQuery  (optional)
     * @see #userIDAttributeAtTypeHintQuery  (optional)
     * @see #defaultGroupsQuery  (optional)
     * @see #defaultGroupsAtTypeHintQuery  (optional)
     * @see #idpCertAliasQuery  (optional)
     * @see #idpCertAliasAtTypeHintQuery  (optional)
     * @see #addGroupMembershipsQuery  (optional)
     * @see #addGroupMembershipsAtTypeHintQuery  (optional)
     * @see #pathQuery  (optional)
     * @see #pathAtTypeHintQuery  (optional)
     * @see #synchronizeAttributesQuery  (optional)
     * @see #synchronizeAttributesAtTypeHintQuery  (optional)
     * @see #clockToleranceQuery  (optional)
     * @see #clockToleranceAtTypeHintQuery  (optional)
     * @see #groupMembershipAttributeQuery  (optional)
     * @see #groupMembershipAttributeAtTypeHintQuery  (optional)
     * @see #idpUrlQuery  (optional)
     * @see #idpUrlAtTypeHintQuery  (optional)
     * @see #logoutUrlQuery  (optional)
     * @see #logoutUrlAtTypeHintQuery  (optional)
     * @see #serviceProviderEntityIdQuery  (optional)
     * @see #serviceProviderEntityIdAtTypeHintQuery  (optional)
     * @see #assertionConsumerServiceURLQuery  (optional)
     * @see #assertionConsumerServiceURLAtTypeHintQuery  (optional)
     * @see #handleLogoutQuery  (optional)
     * @see #handleLogoutAtTypeHintQuery  (optional)
     * @see #spPrivateKeyAliasQuery  (optional)
     * @see #spPrivateKeyAliasAtTypeHintQuery  (optional)
     * @see #useEncryptionQuery  (optional)
     * @see #useEncryptionAtTypeHintQuery  (optional)
     * @see #nameIdFormatQuery  (optional)
     * @see #nameIdFormatAtTypeHintQuery  (optional)
     * @see #digestMethodQuery  (optional)
     * @see #digestMethodAtTypeHintQuery  (optional)
     * @see #signatureMethodQuery  (optional)
     * @see #signatureMethodAtTypeHintQuery  (optional)
     * @see #userIntermediatePathQuery  (optional)
     * @see #userIntermediatePathAtTypeHintQuery  (optional)
     */
    public static class PostConfigAdobeGraniteSamlAuthenticationHandlerOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String KEY_STORE_PASSWORD_QUERY = "keyStorePassword";

        /**
         * @param keyStorePassword (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper keyStorePasswordQuery(Object... keyStorePassword) {
            reqSpec.addQueryParam(KEY_STORE_PASSWORD_QUERY, keyStorePassword);
            return this;
        }

        public static final String KEY_STORE_PASSWORD_AT_TYPE_HINT_QUERY = "keyStorePassword@TypeHint";

        /**
         * @param keyStorePasswordAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper keyStorePasswordAtTypeHintQuery(Object... keyStorePasswordAtTypeHint) {
            reqSpec.addQueryParam(KEY_STORE_PASSWORD_AT_TYPE_HINT_QUERY, keyStorePasswordAtTypeHint);
            return this;
        }

        public static final String SERVICE_RANKING_QUERY = "service.ranking";

        /**
         * @param serviceRanking (Integer)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper serviceRankingQuery(Object... serviceRanking) {
            reqSpec.addQueryParam(SERVICE_RANKING_QUERY, serviceRanking);
            return this;
        }

        public static final String SERVICE_RANKING_AT_TYPE_HINT_QUERY = "service.ranking@TypeHint";

        /**
         * @param serviceRankingAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper serviceRankingAtTypeHintQuery(Object... serviceRankingAtTypeHint) {
            reqSpec.addQueryParam(SERVICE_RANKING_AT_TYPE_HINT_QUERY, serviceRankingAtTypeHint);
            return this;
        }

        public static final String IDP_HTTP_REDIRECT_QUERY = "idpHttpRedirect";

        /**
         * @param idpHttpRedirect (Boolean)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper idpHttpRedirectQuery(Object... idpHttpRedirect) {
            reqSpec.addQueryParam(IDP_HTTP_REDIRECT_QUERY, idpHttpRedirect);
            return this;
        }

        public static final String IDP_HTTP_REDIRECT_AT_TYPE_HINT_QUERY = "idpHttpRedirect@TypeHint";

        /**
         * @param idpHttpRedirectAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper idpHttpRedirectAtTypeHintQuery(Object... idpHttpRedirectAtTypeHint) {
            reqSpec.addQueryParam(IDP_HTTP_REDIRECT_AT_TYPE_HINT_QUERY, idpHttpRedirectAtTypeHint);
            return this;
        }

        public static final String CREATE_USER_QUERY = "createUser";

        /**
         * @param createUser (Boolean)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper createUserQuery(Object... createUser) {
            reqSpec.addQueryParam(CREATE_USER_QUERY, createUser);
            return this;
        }

        public static final String CREATE_USER_AT_TYPE_HINT_QUERY = "createUser@TypeHint";

        /**
         * @param createUserAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper createUserAtTypeHintQuery(Object... createUserAtTypeHint) {
            reqSpec.addQueryParam(CREATE_USER_AT_TYPE_HINT_QUERY, createUserAtTypeHint);
            return this;
        }

        public static final String DEFAULT_REDIRECT_URL_QUERY = "defaultRedirectUrl";

        /**
         * @param defaultRedirectUrl (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper defaultRedirectUrlQuery(Object... defaultRedirectUrl) {
            reqSpec.addQueryParam(DEFAULT_REDIRECT_URL_QUERY, defaultRedirectUrl);
            return this;
        }

        public static final String DEFAULT_REDIRECT_URL_AT_TYPE_HINT_QUERY = "defaultRedirectUrl@TypeHint";

        /**
         * @param defaultRedirectUrlAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper defaultRedirectUrlAtTypeHintQuery(Object... defaultRedirectUrlAtTypeHint) {
            reqSpec.addQueryParam(DEFAULT_REDIRECT_URL_AT_TYPE_HINT_QUERY, defaultRedirectUrlAtTypeHint);
            return this;
        }

        public static final String USER_I_D_ATTRIBUTE_QUERY = "userIDAttribute";

        /**
         * @param userIDAttribute (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper userIDAttributeQuery(Object... userIDAttribute) {
            reqSpec.addQueryParam(USER_I_D_ATTRIBUTE_QUERY, userIDAttribute);
            return this;
        }

        public static final String USER_I_D_ATTRIBUTE_AT_TYPE_HINT_QUERY = "userIDAttribute@TypeHint";

        /**
         * @param userIDAttributeAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper userIDAttributeAtTypeHintQuery(Object... userIDAttributeAtTypeHint) {
            reqSpec.addQueryParam(USER_I_D_ATTRIBUTE_AT_TYPE_HINT_QUERY, userIDAttributeAtTypeHint);
            return this;
        }

        public static final String DEFAULT_GROUPS_QUERY = "defaultGroups";

        /**
         * @param defaultGroups (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper defaultGroupsQuery(Object... defaultGroups) {
            reqSpec.addQueryParam(DEFAULT_GROUPS_QUERY, defaultGroups);
            return this;
        }

        public static final String DEFAULT_GROUPS_AT_TYPE_HINT_QUERY = "defaultGroups@TypeHint";

        /**
         * @param defaultGroupsAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper defaultGroupsAtTypeHintQuery(Object... defaultGroupsAtTypeHint) {
            reqSpec.addQueryParam(DEFAULT_GROUPS_AT_TYPE_HINT_QUERY, defaultGroupsAtTypeHint);
            return this;
        }

        public static final String IDP_CERT_ALIAS_QUERY = "idpCertAlias";

        /**
         * @param idpCertAlias (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper idpCertAliasQuery(Object... idpCertAlias) {
            reqSpec.addQueryParam(IDP_CERT_ALIAS_QUERY, idpCertAlias);
            return this;
        }

        public static final String IDP_CERT_ALIAS_AT_TYPE_HINT_QUERY = "idpCertAlias@TypeHint";

        /**
         * @param idpCertAliasAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper idpCertAliasAtTypeHintQuery(Object... idpCertAliasAtTypeHint) {
            reqSpec.addQueryParam(IDP_CERT_ALIAS_AT_TYPE_HINT_QUERY, idpCertAliasAtTypeHint);
            return this;
        }

        public static final String ADD_GROUP_MEMBERSHIPS_QUERY = "addGroupMemberships";

        /**
         * @param addGroupMemberships (Boolean)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper addGroupMembershipsQuery(Object... addGroupMemberships) {
            reqSpec.addQueryParam(ADD_GROUP_MEMBERSHIPS_QUERY, addGroupMemberships);
            return this;
        }

        public static final String ADD_GROUP_MEMBERSHIPS_AT_TYPE_HINT_QUERY = "addGroupMemberships@TypeHint";

        /**
         * @param addGroupMembershipsAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper addGroupMembershipsAtTypeHintQuery(Object... addGroupMembershipsAtTypeHint) {
            reqSpec.addQueryParam(ADD_GROUP_MEMBERSHIPS_AT_TYPE_HINT_QUERY, addGroupMembershipsAtTypeHint);
            return this;
        }

        public static final String PATH_QUERY = "path";

        /**
         * @param path (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper pathQuery(Object... path) {
            reqSpec.addQueryParam(PATH_QUERY, path);
            return this;
        }

        public static final String PATH_AT_TYPE_HINT_QUERY = "path@TypeHint";

        /**
         * @param pathAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper pathAtTypeHintQuery(Object... pathAtTypeHint) {
            reqSpec.addQueryParam(PATH_AT_TYPE_HINT_QUERY, pathAtTypeHint);
            return this;
        }

        public static final String SYNCHRONIZE_ATTRIBUTES_QUERY = "synchronizeAttributes";

        /**
         * @param synchronizeAttributes (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper synchronizeAttributesQuery(Object... synchronizeAttributes) {
            reqSpec.addQueryParam(SYNCHRONIZE_ATTRIBUTES_QUERY, synchronizeAttributes);
            return this;
        }

        public static final String SYNCHRONIZE_ATTRIBUTES_AT_TYPE_HINT_QUERY = "synchronizeAttributes@TypeHint";

        /**
         * @param synchronizeAttributesAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper synchronizeAttributesAtTypeHintQuery(Object... synchronizeAttributesAtTypeHint) {
            reqSpec.addQueryParam(SYNCHRONIZE_ATTRIBUTES_AT_TYPE_HINT_QUERY, synchronizeAttributesAtTypeHint);
            return this;
        }

        public static final String CLOCK_TOLERANCE_QUERY = "clockTolerance";

        /**
         * @param clockTolerance (Integer)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper clockToleranceQuery(Object... clockTolerance) {
            reqSpec.addQueryParam(CLOCK_TOLERANCE_QUERY, clockTolerance);
            return this;
        }

        public static final String CLOCK_TOLERANCE_AT_TYPE_HINT_QUERY = "clockTolerance@TypeHint";

        /**
         * @param clockToleranceAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper clockToleranceAtTypeHintQuery(Object... clockToleranceAtTypeHint) {
            reqSpec.addQueryParam(CLOCK_TOLERANCE_AT_TYPE_HINT_QUERY, clockToleranceAtTypeHint);
            return this;
        }

        public static final String GROUP_MEMBERSHIP_ATTRIBUTE_QUERY = "groupMembershipAttribute";

        /**
         * @param groupMembershipAttribute (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper groupMembershipAttributeQuery(Object... groupMembershipAttribute) {
            reqSpec.addQueryParam(GROUP_MEMBERSHIP_ATTRIBUTE_QUERY, groupMembershipAttribute);
            return this;
        }

        public static final String GROUP_MEMBERSHIP_ATTRIBUTE_AT_TYPE_HINT_QUERY = "groupMembershipAttribute@TypeHint";

        /**
         * @param groupMembershipAttributeAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper groupMembershipAttributeAtTypeHintQuery(Object... groupMembershipAttributeAtTypeHint) {
            reqSpec.addQueryParam(GROUP_MEMBERSHIP_ATTRIBUTE_AT_TYPE_HINT_QUERY, groupMembershipAttributeAtTypeHint);
            return this;
        }

        public static final String IDP_URL_QUERY = "idpUrl";

        /**
         * @param idpUrl (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper idpUrlQuery(Object... idpUrl) {
            reqSpec.addQueryParam(IDP_URL_QUERY, idpUrl);
            return this;
        }

        public static final String IDP_URL_AT_TYPE_HINT_QUERY = "idpUrl@TypeHint";

        /**
         * @param idpUrlAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper idpUrlAtTypeHintQuery(Object... idpUrlAtTypeHint) {
            reqSpec.addQueryParam(IDP_URL_AT_TYPE_HINT_QUERY, idpUrlAtTypeHint);
            return this;
        }

        public static final String LOGOUT_URL_QUERY = "logoutUrl";

        /**
         * @param logoutUrl (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper logoutUrlQuery(Object... logoutUrl) {
            reqSpec.addQueryParam(LOGOUT_URL_QUERY, logoutUrl);
            return this;
        }

        public static final String LOGOUT_URL_AT_TYPE_HINT_QUERY = "logoutUrl@TypeHint";

        /**
         * @param logoutUrlAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper logoutUrlAtTypeHintQuery(Object... logoutUrlAtTypeHint) {
            reqSpec.addQueryParam(LOGOUT_URL_AT_TYPE_HINT_QUERY, logoutUrlAtTypeHint);
            return this;
        }

        public static final String SERVICE_PROVIDER_ENTITY_ID_QUERY = "serviceProviderEntityId";

        /**
         * @param serviceProviderEntityId (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper serviceProviderEntityIdQuery(Object... serviceProviderEntityId) {
            reqSpec.addQueryParam(SERVICE_PROVIDER_ENTITY_ID_QUERY, serviceProviderEntityId);
            return this;
        }

        public static final String SERVICE_PROVIDER_ENTITY_ID_AT_TYPE_HINT_QUERY = "serviceProviderEntityId@TypeHint";

        /**
         * @param serviceProviderEntityIdAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper serviceProviderEntityIdAtTypeHintQuery(Object... serviceProviderEntityIdAtTypeHint) {
            reqSpec.addQueryParam(SERVICE_PROVIDER_ENTITY_ID_AT_TYPE_HINT_QUERY, serviceProviderEntityIdAtTypeHint);
            return this;
        }

        public static final String ASSERTION_CONSUMER_SERVICE_U_R_L_QUERY = "assertionConsumerServiceURL";

        /**
         * @param assertionConsumerServiceURL (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper assertionConsumerServiceURLQuery(Object... assertionConsumerServiceURL) {
            reqSpec.addQueryParam(ASSERTION_CONSUMER_SERVICE_U_R_L_QUERY, assertionConsumerServiceURL);
            return this;
        }

        public static final String ASSERTION_CONSUMER_SERVICE_U_R_L_AT_TYPE_HINT_QUERY = "assertionConsumerServiceURL@TypeHint";

        /**
         * @param assertionConsumerServiceURLAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper assertionConsumerServiceURLAtTypeHintQuery(Object... assertionConsumerServiceURLAtTypeHint) {
            reqSpec.addQueryParam(ASSERTION_CONSUMER_SERVICE_U_R_L_AT_TYPE_HINT_QUERY, assertionConsumerServiceURLAtTypeHint);
            return this;
        }

        public static final String HANDLE_LOGOUT_QUERY = "handleLogout";

        /**
         * @param handleLogout (Boolean)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper handleLogoutQuery(Object... handleLogout) {
            reqSpec.addQueryParam(HANDLE_LOGOUT_QUERY, handleLogout);
            return this;
        }

        public static final String HANDLE_LOGOUT_AT_TYPE_HINT_QUERY = "handleLogout@TypeHint";

        /**
         * @param handleLogoutAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper handleLogoutAtTypeHintQuery(Object... handleLogoutAtTypeHint) {
            reqSpec.addQueryParam(HANDLE_LOGOUT_AT_TYPE_HINT_QUERY, handleLogoutAtTypeHint);
            return this;
        }

        public static final String SP_PRIVATE_KEY_ALIAS_QUERY = "spPrivateKeyAlias";

        /**
         * @param spPrivateKeyAlias (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper spPrivateKeyAliasQuery(Object... spPrivateKeyAlias) {
            reqSpec.addQueryParam(SP_PRIVATE_KEY_ALIAS_QUERY, spPrivateKeyAlias);
            return this;
        }

        public static final String SP_PRIVATE_KEY_ALIAS_AT_TYPE_HINT_QUERY = "spPrivateKeyAlias@TypeHint";

        /**
         * @param spPrivateKeyAliasAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper spPrivateKeyAliasAtTypeHintQuery(Object... spPrivateKeyAliasAtTypeHint) {
            reqSpec.addQueryParam(SP_PRIVATE_KEY_ALIAS_AT_TYPE_HINT_QUERY, spPrivateKeyAliasAtTypeHint);
            return this;
        }

        public static final String USE_ENCRYPTION_QUERY = "useEncryption";

        /**
         * @param useEncryption (Boolean)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper useEncryptionQuery(Object... useEncryption) {
            reqSpec.addQueryParam(USE_ENCRYPTION_QUERY, useEncryption);
            return this;
        }

        public static final String USE_ENCRYPTION_AT_TYPE_HINT_QUERY = "useEncryption@TypeHint";

        /**
         * @param useEncryptionAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper useEncryptionAtTypeHintQuery(Object... useEncryptionAtTypeHint) {
            reqSpec.addQueryParam(USE_ENCRYPTION_AT_TYPE_HINT_QUERY, useEncryptionAtTypeHint);
            return this;
        }

        public static final String NAME_ID_FORMAT_QUERY = "nameIdFormat";

        /**
         * @param nameIdFormat (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper nameIdFormatQuery(Object... nameIdFormat) {
            reqSpec.addQueryParam(NAME_ID_FORMAT_QUERY, nameIdFormat);
            return this;
        }

        public static final String NAME_ID_FORMAT_AT_TYPE_HINT_QUERY = "nameIdFormat@TypeHint";

        /**
         * @param nameIdFormatAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper nameIdFormatAtTypeHintQuery(Object... nameIdFormatAtTypeHint) {
            reqSpec.addQueryParam(NAME_ID_FORMAT_AT_TYPE_HINT_QUERY, nameIdFormatAtTypeHint);
            return this;
        }

        public static final String DIGEST_METHOD_QUERY = "digestMethod";

        /**
         * @param digestMethod (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper digestMethodQuery(Object... digestMethod) {
            reqSpec.addQueryParam(DIGEST_METHOD_QUERY, digestMethod);
            return this;
        }

        public static final String DIGEST_METHOD_AT_TYPE_HINT_QUERY = "digestMethod@TypeHint";

        /**
         * @param digestMethodAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper digestMethodAtTypeHintQuery(Object... digestMethodAtTypeHint) {
            reqSpec.addQueryParam(DIGEST_METHOD_AT_TYPE_HINT_QUERY, digestMethodAtTypeHint);
            return this;
        }

        public static final String SIGNATURE_METHOD_QUERY = "signatureMethod";

        /**
         * @param signatureMethod (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper signatureMethodQuery(Object... signatureMethod) {
            reqSpec.addQueryParam(SIGNATURE_METHOD_QUERY, signatureMethod);
            return this;
        }

        public static final String SIGNATURE_METHOD_AT_TYPE_HINT_QUERY = "signatureMethod@TypeHint";

        /**
         * @param signatureMethodAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper signatureMethodAtTypeHintQuery(Object... signatureMethodAtTypeHint) {
            reqSpec.addQueryParam(SIGNATURE_METHOD_AT_TYPE_HINT_QUERY, signatureMethodAtTypeHint);
            return this;
        }

        public static final String USER_INTERMEDIATE_PATH_QUERY = "userIntermediatePath";

        /**
         * @param userIntermediatePath (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper userIntermediatePathQuery(Object... userIntermediatePath) {
            reqSpec.addQueryParam(USER_INTERMEDIATE_PATH_QUERY, userIntermediatePath);
            return this;
        }

        public static final String USER_INTERMEDIATE_PATH_AT_TYPE_HINT_QUERY = "userIntermediatePath@TypeHint";

        /**
         * @param userIntermediatePathAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper userIntermediatePathAtTypeHintQuery(Object... userIntermediatePathAtTypeHint) {
            reqSpec.addQueryParam(USER_INTERMEDIATE_PATH_AT_TYPE_HINT_QUERY, userIntermediatePathAtTypeHint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigAdobeGraniteSamlAuthenticationHandlerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #orgApacheFelixHttpsNioQuery  (optional)
     * @see #orgApacheFelixHttpsNioAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsKeystoreQuery  (optional)
     * @see #orgApacheFelixHttpsKeystoreAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsKeystorePasswordQuery  (optional)
     * @see #orgApacheFelixHttpsKeystorePasswordAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsKeystoreKeyQuery  (optional)
     * @see #orgApacheFelixHttpsKeystoreKeyAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsKeystoreKeyPasswordQuery  (optional)
     * @see #orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsTruststoreQuery  (optional)
     * @see #orgApacheFelixHttpsTruststoreAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsTruststorePasswordQuery  (optional)
     * @see #orgApacheFelixHttpsTruststorePasswordAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsClientcertificateQuery  (optional)
     * @see #orgApacheFelixHttpsClientcertificateAtTypeHintQuery  (optional)
     * @see #orgApacheFelixHttpsEnableQuery  (optional)
     * @see #orgApacheFelixHttpsEnableAtTypeHintQuery  (optional)
     * @see #orgOsgiServiceHttpPortSecureQuery  (optional)
     * @see #orgOsgiServiceHttpPortSecureAtTypeHintQuery  (optional)
     */
    public static class PostConfigApacheFelixJettyBasedHttpServiceOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/org.apache.felix.http";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigApacheFelixJettyBasedHttpServiceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/org.apache.felix.http
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ORG_APACHE_FELIX_HTTPS_NIO_QUERY = "org.apache.felix.https.nio";

        /**
         * @param orgApacheFelixHttpsNio (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsNioQuery(Object... orgApacheFelixHttpsNio) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_NIO_QUERY, orgApacheFelixHttpsNio);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_NIO_AT_TYPE_HINT_QUERY = "org.apache.felix.https.nio@TypeHint";

        /**
         * @param orgApacheFelixHttpsNioAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsNioAtTypeHintQuery(Object... orgApacheFelixHttpsNioAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_NIO_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsNioAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_QUERY = "org.apache.felix.https.keystore";

        /**
         * @param orgApacheFelixHttpsKeystore (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystoreQuery(Object... orgApacheFelixHttpsKeystore) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_QUERY, orgApacheFelixHttpsKeystore);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_AT_TYPE_HINT_QUERY = "org.apache.felix.https.keystore@TypeHint";

        /**
         * @param orgApacheFelixHttpsKeystoreAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystoreAtTypeHintQuery(Object... orgApacheFelixHttpsKeystoreAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsKeystoreAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_PASSWORD_QUERY = "org.apache.felix.https.keystore.password";

        /**
         * @param orgApacheFelixHttpsKeystorePassword (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystorePasswordQuery(Object... orgApacheFelixHttpsKeystorePassword) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_PASSWORD_QUERY, orgApacheFelixHttpsKeystorePassword);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_PASSWORD_AT_TYPE_HINT_QUERY = "org.apache.felix.https.keystore.password@TypeHint";

        /**
         * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystorePasswordAtTypeHintQuery(Object... orgApacheFelixHttpsKeystorePasswordAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_PASSWORD_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsKeystorePasswordAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_QUERY = "org.apache.felix.https.keystore.key";

        /**
         * @param orgApacheFelixHttpsKeystoreKey (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystoreKeyQuery(Object... orgApacheFelixHttpsKeystoreKey) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_QUERY, orgApacheFelixHttpsKeystoreKey);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_AT_TYPE_HINT_QUERY = "org.apache.felix.https.keystore.key@TypeHint";

        /**
         * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystoreKeyAtTypeHintQuery(Object... orgApacheFelixHttpsKeystoreKeyAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsKeystoreKeyAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_PASSWORD_QUERY = "org.apache.felix.https.keystore.key.password";

        /**
         * @param orgApacheFelixHttpsKeystoreKeyPassword (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystoreKeyPasswordQuery(Object... orgApacheFelixHttpsKeystoreKeyPassword) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_PASSWORD_QUERY, orgApacheFelixHttpsKeystoreKeyPassword);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_PASSWORD_AT_TYPE_HINT_QUERY = "org.apache.felix.https.keystore.key.password@TypeHint";

        /**
         * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHintQuery(Object... orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_KEYSTORE_KEY_PASSWORD_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_QUERY = "org.apache.felix.https.truststore";

        /**
         * @param orgApacheFelixHttpsTruststore (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsTruststoreQuery(Object... orgApacheFelixHttpsTruststore) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_QUERY, orgApacheFelixHttpsTruststore);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_AT_TYPE_HINT_QUERY = "org.apache.felix.https.truststore@TypeHint";

        /**
         * @param orgApacheFelixHttpsTruststoreAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsTruststoreAtTypeHintQuery(Object... orgApacheFelixHttpsTruststoreAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsTruststoreAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_PASSWORD_QUERY = "org.apache.felix.https.truststore.password";

        /**
         * @param orgApacheFelixHttpsTruststorePassword (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsTruststorePasswordQuery(Object... orgApacheFelixHttpsTruststorePassword) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_PASSWORD_QUERY, orgApacheFelixHttpsTruststorePassword);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_PASSWORD_AT_TYPE_HINT_QUERY = "org.apache.felix.https.truststore.password@TypeHint";

        /**
         * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsTruststorePasswordAtTypeHintQuery(Object... orgApacheFelixHttpsTruststorePasswordAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_TRUSTSTORE_PASSWORD_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsTruststorePasswordAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_CLIENTCERTIFICATE_QUERY = "org.apache.felix.https.clientcertificate";

        /**
         * @param orgApacheFelixHttpsClientcertificate (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsClientcertificateQuery(Object... orgApacheFelixHttpsClientcertificate) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_CLIENTCERTIFICATE_QUERY, orgApacheFelixHttpsClientcertificate);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_CLIENTCERTIFICATE_AT_TYPE_HINT_QUERY = "org.apache.felix.https.clientcertificate@TypeHint";

        /**
         * @param orgApacheFelixHttpsClientcertificateAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsClientcertificateAtTypeHintQuery(Object... orgApacheFelixHttpsClientcertificateAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_CLIENTCERTIFICATE_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsClientcertificateAtTypeHint);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_ENABLE_QUERY = "org.apache.felix.https.enable";

        /**
         * @param orgApacheFelixHttpsEnable (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsEnableQuery(Object... orgApacheFelixHttpsEnable) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_ENABLE_QUERY, orgApacheFelixHttpsEnable);
            return this;
        }

        public static final String ORG_APACHE_FELIX_HTTPS_ENABLE_AT_TYPE_HINT_QUERY = "org.apache.felix.https.enable@TypeHint";

        /**
         * @param orgApacheFelixHttpsEnableAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgApacheFelixHttpsEnableAtTypeHintQuery(Object... orgApacheFelixHttpsEnableAtTypeHint) {
            reqSpec.addQueryParam(ORG_APACHE_FELIX_HTTPS_ENABLE_AT_TYPE_HINT_QUERY, orgApacheFelixHttpsEnableAtTypeHint);
            return this;
        }

        public static final String ORG_OSGI_SERVICE_HTTP_PORT_SECURE_QUERY = "org.osgi.service.http.port.secure";

        /**
         * @param orgOsgiServiceHttpPortSecure (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgOsgiServiceHttpPortSecureQuery(Object... orgOsgiServiceHttpPortSecure) {
            reqSpec.addQueryParam(ORG_OSGI_SERVICE_HTTP_PORT_SECURE_QUERY, orgOsgiServiceHttpPortSecure);
            return this;
        }

        public static final String ORG_OSGI_SERVICE_HTTP_PORT_SECURE_AT_TYPE_HINT_QUERY = "org.osgi.service.http.port.secure@TypeHint";

        /**
         * @param orgOsgiServiceHttpPortSecureAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper orgOsgiServiceHttpPortSecureAtTypeHintQuery(Object... orgOsgiServiceHttpPortSecureAtTypeHint) {
            reqSpec.addQueryParam(ORG_OSGI_SERVICE_HTTP_PORT_SECURE_AT_TYPE_HINT_QUERY, orgOsgiServiceHttpPortSecureAtTypeHint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigApacheFelixJettyBasedHttpServiceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #proxyHostQuery  (optional)
     * @see #proxyHostAtTypeHintQuery  (optional)
     * @see #proxyPortQuery  (optional)
     * @see #proxyPortAtTypeHintQuery  (optional)
     * @see #proxyExceptionsQuery  (optional)
     * @see #proxyExceptionsAtTypeHintQuery  (optional)
     * @see #proxyEnabledQuery  (optional)
     * @see #proxyEnabledAtTypeHintQuery  (optional)
     * @see #proxyUserQuery  (optional)
     * @see #proxyUserAtTypeHintQuery  (optional)
     * @see #proxyPasswordQuery  (optional)
     * @see #proxyPasswordAtTypeHintQuery  (optional)
     */
    public static class PostConfigApacheHttpComponentsProxyConfigurationOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/org.apache.http.proxyconfigurator.config";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigApacheHttpComponentsProxyConfigurationOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/org.apache.http.proxyconfigurator.config
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String PROXY_HOST_QUERY = "proxy.host";

        /**
         * @param proxyHost (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyHostQuery(Object... proxyHost) {
            reqSpec.addQueryParam(PROXY_HOST_QUERY, proxyHost);
            return this;
        }

        public static final String PROXY_HOST_AT_TYPE_HINT_QUERY = "proxy.host@TypeHint";

        /**
         * @param proxyHostAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyHostAtTypeHintQuery(Object... proxyHostAtTypeHint) {
            reqSpec.addQueryParam(PROXY_HOST_AT_TYPE_HINT_QUERY, proxyHostAtTypeHint);
            return this;
        }

        public static final String PROXY_PORT_QUERY = "proxy.port";

        /**
         * @param proxyPort (Integer)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyPortQuery(Object... proxyPort) {
            reqSpec.addQueryParam(PROXY_PORT_QUERY, proxyPort);
            return this;
        }

        public static final String PROXY_PORT_AT_TYPE_HINT_QUERY = "proxy.port@TypeHint";

        /**
         * @param proxyPortAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyPortAtTypeHintQuery(Object... proxyPortAtTypeHint) {
            reqSpec.addQueryParam(PROXY_PORT_AT_TYPE_HINT_QUERY, proxyPortAtTypeHint);
            return this;
        }

        public static final String PROXY_EXCEPTIONS_QUERY = "proxy.exceptions";

        /**
         * @param proxyExceptions (List&lt;String&gt;)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyExceptionsQuery(Object... proxyExceptions) {
            reqSpec.addQueryParam(PROXY_EXCEPTIONS_QUERY, proxyExceptions);
            return this;
        }

        public static final String PROXY_EXCEPTIONS_AT_TYPE_HINT_QUERY = "proxy.exceptions@TypeHint";

        /**
         * @param proxyExceptionsAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyExceptionsAtTypeHintQuery(Object... proxyExceptionsAtTypeHint) {
            reqSpec.addQueryParam(PROXY_EXCEPTIONS_AT_TYPE_HINT_QUERY, proxyExceptionsAtTypeHint);
            return this;
        }

        public static final String PROXY_ENABLED_QUERY = "proxy.enabled";

        /**
         * @param proxyEnabled (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyEnabledQuery(Object... proxyEnabled) {
            reqSpec.addQueryParam(PROXY_ENABLED_QUERY, proxyEnabled);
            return this;
        }

        public static final String PROXY_ENABLED_AT_TYPE_HINT_QUERY = "proxy.enabled@TypeHint";

        /**
         * @param proxyEnabledAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyEnabledAtTypeHintQuery(Object... proxyEnabledAtTypeHint) {
            reqSpec.addQueryParam(PROXY_ENABLED_AT_TYPE_HINT_QUERY, proxyEnabledAtTypeHint);
            return this;
        }

        public static final String PROXY_USER_QUERY = "proxy.user";

        /**
         * @param proxyUser (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyUserQuery(Object... proxyUser) {
            reqSpec.addQueryParam(PROXY_USER_QUERY, proxyUser);
            return this;
        }

        public static final String PROXY_USER_AT_TYPE_HINT_QUERY = "proxy.user@TypeHint";

        /**
         * @param proxyUserAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyUserAtTypeHintQuery(Object... proxyUserAtTypeHint) {
            reqSpec.addQueryParam(PROXY_USER_AT_TYPE_HINT_QUERY, proxyUserAtTypeHint);
            return this;
        }

        public static final String PROXY_PASSWORD_QUERY = "proxy.password";

        /**
         * @param proxyPassword (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyPasswordQuery(Object... proxyPassword) {
            reqSpec.addQueryParam(PROXY_PASSWORD_QUERY, proxyPassword);
            return this;
        }

        public static final String PROXY_PASSWORD_AT_TYPE_HINT_QUERY = "proxy.password@TypeHint";

        /**
         * @param proxyPasswordAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper proxyPasswordAtTypeHintQuery(Object... proxyPasswordAtTypeHint) {
            reqSpec.addQueryParam(PROXY_PASSWORD_AT_TYPE_HINT_QUERY, proxyPasswordAtTypeHint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigApacheHttpComponentsProxyConfigurationOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aliasQuery  (optional)
     * @see #aliasAtTypeHintQuery  (optional)
     * @see #davCreateAbsoluteUriQuery  (optional)
     * @see #davCreateAbsoluteUriAtTypeHintQuery  (optional)
     */
    public static class PostConfigApacheSlingDavExServletOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigApacheSlingDavExServletOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ALIAS_QUERY = "alias";

        /**
         * @param alias (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingDavExServletOper aliasQuery(Object... alias) {
            reqSpec.addQueryParam(ALIAS_QUERY, alias);
            return this;
        }

        public static final String ALIAS_AT_TYPE_HINT_QUERY = "alias@TypeHint";

        /**
         * @param aliasAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingDavExServletOper aliasAtTypeHintQuery(Object... aliasAtTypeHint) {
            reqSpec.addQueryParam(ALIAS_AT_TYPE_HINT_QUERY, aliasAtTypeHint);
            return this;
        }

        public static final String DAV_CREATE_ABSOLUTE_URI_QUERY = "dav.create-absolute-uri";

        /**
         * @param davCreateAbsoluteUri (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingDavExServletOper davCreateAbsoluteUriQuery(Object... davCreateAbsoluteUri) {
            reqSpec.addQueryParam(DAV_CREATE_ABSOLUTE_URI_QUERY, davCreateAbsoluteUri);
            return this;
        }

        public static final String DAV_CREATE_ABSOLUTE_URI_AT_TYPE_HINT_QUERY = "dav.create-absolute-uri@TypeHint";

        /**
         * @param davCreateAbsoluteUriAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingDavExServletOper davCreateAbsoluteUriAtTypeHintQuery(Object... davCreateAbsoluteUriAtTypeHint) {
            reqSpec.addQueryParam(DAV_CREATE_ABSOLUTE_URI_AT_TYPE_HINT_QUERY, davCreateAbsoluteUriAtTypeHint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigApacheSlingDavExServletOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigApacheSlingDavExServletOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #jsonMaximumresultsQuery  (optional)
     * @see #jsonMaximumresultsAtTypeHintQuery  (optional)
     * @see #enableHtmlQuery  (optional)
     * @see #enableHtmlAtTypeHintQuery  (optional)
     * @see #enableTxtQuery  (optional)
     * @see #enableTxtAtTypeHintQuery  (optional)
     * @see #enableXmlQuery  (optional)
     * @see #enableXmlAtTypeHintQuery  (optional)
     */
    public static class PostConfigApacheSlingGetServletOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigApacheSlingGetServletOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String JSON_MAXIMUMRESULTS_QUERY = "json.maximumresults";

        /**
         * @param jsonMaximumresults (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper jsonMaximumresultsQuery(Object... jsonMaximumresults) {
            reqSpec.addQueryParam(JSON_MAXIMUMRESULTS_QUERY, jsonMaximumresults);
            return this;
        }

        public static final String JSON_MAXIMUMRESULTS_AT_TYPE_HINT_QUERY = "json.maximumresults@TypeHint";

        /**
         * @param jsonMaximumresultsAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper jsonMaximumresultsAtTypeHintQuery(Object... jsonMaximumresultsAtTypeHint) {
            reqSpec.addQueryParam(JSON_MAXIMUMRESULTS_AT_TYPE_HINT_QUERY, jsonMaximumresultsAtTypeHint);
            return this;
        }

        public static final String ENABLE_HTML_QUERY = "enable.html";

        /**
         * @param enableHtml (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper enableHtmlQuery(Object... enableHtml) {
            reqSpec.addQueryParam(ENABLE_HTML_QUERY, enableHtml);
            return this;
        }

        public static final String ENABLE_HTML_AT_TYPE_HINT_QUERY = "enable.html@TypeHint";

        /**
         * @param enableHtmlAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper enableHtmlAtTypeHintQuery(Object... enableHtmlAtTypeHint) {
            reqSpec.addQueryParam(ENABLE_HTML_AT_TYPE_HINT_QUERY, enableHtmlAtTypeHint);
            return this;
        }

        public static final String ENABLE_TXT_QUERY = "enable.txt";

        /**
         * @param enableTxt (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper enableTxtQuery(Object... enableTxt) {
            reqSpec.addQueryParam(ENABLE_TXT_QUERY, enableTxt);
            return this;
        }

        public static final String ENABLE_TXT_AT_TYPE_HINT_QUERY = "enable.txt@TypeHint";

        /**
         * @param enableTxtAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper enableTxtAtTypeHintQuery(Object... enableTxtAtTypeHint) {
            reqSpec.addQueryParam(ENABLE_TXT_AT_TYPE_HINT_QUERY, enableTxtAtTypeHint);
            return this;
        }

        public static final String ENABLE_XML_QUERY = "enable.xml";

        /**
         * @param enableXml (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper enableXmlQuery(Object... enableXml) {
            reqSpec.addQueryParam(ENABLE_XML_QUERY, enableXml);
            return this;
        }

        public static final String ENABLE_XML_AT_TYPE_HINT_QUERY = "enable.xml@TypeHint";

        /**
         * @param enableXmlAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper enableXmlAtTypeHintQuery(Object... enableXmlAtTypeHint) {
            reqSpec.addQueryParam(ENABLE_XML_AT_TYPE_HINT_QUERY, enableXmlAtTypeHint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigApacheSlingGetServletOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #allowEmptyQuery  (optional)
     * @see #allowEmptyAtTypeHintQuery  (optional)
     * @see #allowHostsQuery  (optional)
     * @see #allowHostsAtTypeHintQuery  (optional)
     * @see #allowHostsRegexpQuery  (optional)
     * @see #allowHostsRegexpAtTypeHintQuery  (optional)
     * @see #filterMethodsQuery  (optional)
     * @see #filterMethodsAtTypeHintQuery  (optional)
     */
    public static class PostConfigApacheSlingReferrerFilterOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigApacheSlingReferrerFilterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/org.apache.sling.security.impl.ReferrerFilter
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ALLOW_EMPTY_QUERY = "allow.empty";

        /**
         * @param allowEmpty (Boolean)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper allowEmptyQuery(Object... allowEmpty) {
            reqSpec.addQueryParam(ALLOW_EMPTY_QUERY, allowEmpty);
            return this;
        }

        public static final String ALLOW_EMPTY_AT_TYPE_HINT_QUERY = "allow.empty@TypeHint";

        /**
         * @param allowEmptyAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper allowEmptyAtTypeHintQuery(Object... allowEmptyAtTypeHint) {
            reqSpec.addQueryParam(ALLOW_EMPTY_AT_TYPE_HINT_QUERY, allowEmptyAtTypeHint);
            return this;
        }

        public static final String ALLOW_HOSTS_QUERY = "allow.hosts";

        /**
         * @param allowHosts (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper allowHostsQuery(Object... allowHosts) {
            reqSpec.addQueryParam(ALLOW_HOSTS_QUERY, allowHosts);
            return this;
        }

        public static final String ALLOW_HOSTS_AT_TYPE_HINT_QUERY = "allow.hosts@TypeHint";

        /**
         * @param allowHostsAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper allowHostsAtTypeHintQuery(Object... allowHostsAtTypeHint) {
            reqSpec.addQueryParam(ALLOW_HOSTS_AT_TYPE_HINT_QUERY, allowHostsAtTypeHint);
            return this;
        }

        public static final String ALLOW_HOSTS_REGEXP_QUERY = "allow.hosts.regexp";

        /**
         * @param allowHostsRegexp (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper allowHostsRegexpQuery(Object... allowHostsRegexp) {
            reqSpec.addQueryParam(ALLOW_HOSTS_REGEXP_QUERY, allowHostsRegexp);
            return this;
        }

        public static final String ALLOW_HOSTS_REGEXP_AT_TYPE_HINT_QUERY = "allow.hosts.regexp@TypeHint";

        /**
         * @param allowHostsRegexpAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper allowHostsRegexpAtTypeHintQuery(Object... allowHostsRegexpAtTypeHint) {
            reqSpec.addQueryParam(ALLOW_HOSTS_REGEXP_AT_TYPE_HINT_QUERY, allowHostsRegexpAtTypeHint);
            return this;
        }

        public static final String FILTER_METHODS_QUERY = "filter.methods";

        /**
         * @param filterMethods (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper filterMethodsQuery(Object... filterMethods) {
            reqSpec.addQueryParam(FILTER_METHODS_QUERY, filterMethods);
            return this;
        }

        public static final String FILTER_METHODS_AT_TYPE_HINT_QUERY = "filter.methods@TypeHint";

        /**
         * @param filterMethodsAtTypeHint (String)  (optional)
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper filterMethodsAtTypeHintQuery(Object... filterMethodsAtTypeHint) {
            reqSpec.addQueryParam(FILTER_METHODS_AT_TYPE_HINT_QUERY, filterMethodsAtTypeHint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigApacheSlingReferrerFilterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #configNodeNamePath  (required)
     */
    public static class PostConfigPropertyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/apps/system/config/{configNodeName}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConfigPropertyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /apps/system/config/{configNodeName}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CONFIG_NODE_NAME_PATH = "configNodeName";

        /**
         * @param configNodeName (String)  (required)
         * @return operation
         */
        public PostConfigPropertyOper configNodeNamePath(Object configNodeName) {
            reqSpec.addPathParam(CONFIG_NODE_NAME_PATH, configNodeName);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConfigPropertyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConfigPropertyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathPath  (required)
     * @see #namePath  (required)
     * @see #colonOperationQuery  (optional)
     * @see #deleteAuthorizableQuery  (optional)
     * @see #_fileMultiPart  (optional)
     */
    public static class PostNodeOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/{path}/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostNodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /{path}/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String PATH_PATH = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostNodeOper pathPath(Object path) {
            reqSpec.addPathParam(PATH_PATH, path);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public PostNodeOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        public static final String COLON_OPERATION_QUERY = ":operation";

        /**
         * @param colonOperation (String)  (optional)
         * @return operation
         */
        public PostNodeOper colonOperationQuery(Object... colonOperation) {
            reqSpec.addQueryParam(COLON_OPERATION_QUERY, colonOperation);
            return this;
        }

        public static final String DELETE_AUTHORIZABLE_QUERY = "deleteAuthorizable";

        /**
         * @param deleteAuthorizable (String)  (optional)
         * @return operation
         */
        public PostNodeOper deleteAuthorizableQuery(Object... deleteAuthorizable) {
            reqSpec.addQueryParam(DELETE_AUTHORIZABLE_QUERY, deleteAuthorizable);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param _file (File)  (optional)
         * @return operation
         */
         public PostNodeOper _fileMultiPart(File _file) {
            reqSpec.addMultiPart(_file);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostNodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostNodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathPath  (required)
     * @see #namePath  (required)
     * @see #addMembersQuery  (optional)
     */
    public static class PostNodeRwOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/{path}/{name}.rw.html";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostNodeRwOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /{path}/{name}.rw.html
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String PATH_PATH = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostNodeRwOper pathPath(Object path) {
            reqSpec.addPathParam(PATH_PATH, path);
            return this;
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public PostNodeRwOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        public static final String ADD_MEMBERS_QUERY = "addMembers";

        /**
         * @param addMembers (String)  (optional)
         * @return operation
         */
        public PostNodeRwOper addMembersQuery(Object... addMembers) {
            reqSpec.addQueryParam(ADD_MEMBERS_QUERY, addMembers);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostNodeRwOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostNodeRwOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathPath  (required)
     * @see #jcrColonPrimaryTypeQuery  (required)
     * @see #colonNameQuery  (required)
     */
    public static class PostPathOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/{path}/";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostPathOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /{path}/
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String PATH_PATH = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostPathOper pathPath(Object path) {
            reqSpec.addPathParam(PATH_PATH, path);
            return this;
        }

        public static final String JCR_COLON_PRIMARY_TYPE_QUERY = "jcr:primaryType";

        /**
         * @param jcrColonPrimaryType (String)  (required)
         * @return operation
         */
        public PostPathOper jcrColonPrimaryTypeQuery(Object... jcrColonPrimaryType) {
            reqSpec.addQueryParam(JCR_COLON_PRIMARY_TYPE_QUERY, jcrColonPrimaryType);
            return this;
        }

        public static final String COLON_NAME_QUERY = ":name";

        /**
         * @param colonName (String)  (required)
         * @return operation
         */
        public PostPathOper colonNameQuery(Object... colonName) {
            reqSpec.addQueryParam(COLON_NAME_QUERY, colonName);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostPathOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostPathOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #pathQuery  (required)
     * @see #pLimitQuery  (required)
     * @see #_1propertyQuery  (required)
     * @see #_1propertyValueQuery  (required)
     * return String
     */
    public static class PostQueryOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/bin/querybuilder.json";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostQueryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /bin/querybuilder.json
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /bin/querybuilder.json
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String PATH_QUERY = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostQueryOper pathQuery(Object... path) {
            reqSpec.addQueryParam(PATH_QUERY, path);
            return this;
        }

        public static final String P_LIMIT_QUERY = "p.limit";

        /**
         * @param pLimit (BigDecimal)  (required)
         * @return operation
         */
        public PostQueryOper pLimitQuery(Object... pLimit) {
            reqSpec.addQueryParam(P_LIMIT_QUERY, pLimit);
            return this;
        }

        public static final String _1PROPERTY_QUERY = "1_property";

        /**
         * @param _1property (String)  (required)
         * @return operation
         */
        public PostQueryOper _1propertyQuery(Object... _1property) {
            reqSpec.addQueryParam(_1PROPERTY_QUERY, _1property);
            return this;
        }

        public static final String _1PROPERTY_VALUE_QUERY = "1_property.value";

        /**
         * @param _1propertyValue (String)  (required)
         * @return operation
         */
        public PostQueryOper _1propertyValueQuery(Object... _1propertyValue) {
            reqSpec.addQueryParam(_1PROPERTY_VALUE_QUERY, _1propertyValue);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostQueryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostQueryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #ignoredeactivatedQuery  (required)
     * @see #onlymodifiedQuery  (required)
     * @see #pathQuery  (required)
     * @see #cmdQuery  (required)
     */
    public static class PostTreeActivationOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/libs/replication/treeactivation.html";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostTreeActivationOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /libs/replication/treeactivation.html
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String IGNOREDEACTIVATED_QUERY = "ignoredeactivated";

        /**
         * @param ignoredeactivated (Boolean)  (required)
         * @return operation
         */
        public PostTreeActivationOper ignoredeactivatedQuery(Object... ignoredeactivated) {
            reqSpec.addQueryParam(IGNOREDEACTIVATED_QUERY, ignoredeactivated);
            return this;
        }

        public static final String ONLYMODIFIED_QUERY = "onlymodified";

        /**
         * @param onlymodified (Boolean)  (required)
         * @return operation
         */
        public PostTreeActivationOper onlymodifiedQuery(Object... onlymodified) {
            reqSpec.addQueryParam(ONLYMODIFIED_QUERY, onlymodified);
            return this;
        }

        public static final String PATH_QUERY = "path";

        /**
         * @param path (String)  (required)
         * @return operation
         */
        public PostTreeActivationOper pathQuery(Object... path) {
            reqSpec.addQueryParam(PATH_QUERY, path);
            return this;
        }

        public static final String CMD_QUERY = "cmd";

        /**
         * @param cmd (String)  (required)
         * @return operation
         */
        public PostTreeActivationOper cmdQuery(Object... cmd) {
            reqSpec.addQueryParam(CMD_QUERY, cmd);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostTreeActivationOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostTreeActivationOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #colonOperationQuery  (optional)
     * @see #newPasswordQuery  (optional)
     * @see #rePasswordQuery  (optional)
     * @see #keyStoreTypeQuery  (optional)
     * @see #removeAliasQuery  (optional)
     * @see #certificateMultiPart  (optional)
     * return String
     */
    public static class PostTruststoreOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/libs/granite/security/post/truststore";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostTruststoreOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /libs/granite/security/post/truststore
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /libs/granite/security/post/truststore
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String COLON_OPERATION_QUERY = ":operation";

        /**
         * @param colonOperation (String)  (optional)
         * @return operation
         */
        public PostTruststoreOper colonOperationQuery(Object... colonOperation) {
            reqSpec.addQueryParam(COLON_OPERATION_QUERY, colonOperation);
            return this;
        }

        public static final String NEW_PASSWORD_QUERY = "newPassword";

        /**
         * @param newPassword (String)  (optional)
         * @return operation
         */
        public PostTruststoreOper newPasswordQuery(Object... newPassword) {
            reqSpec.addQueryParam(NEW_PASSWORD_QUERY, newPassword);
            return this;
        }

        public static final String RE_PASSWORD_QUERY = "rePassword";

        /**
         * @param rePassword (String)  (optional)
         * @return operation
         */
        public PostTruststoreOper rePasswordQuery(Object... rePassword) {
            reqSpec.addQueryParam(RE_PASSWORD_QUERY, rePassword);
            return this;
        }

        public static final String KEY_STORE_TYPE_QUERY = "keyStoreType";

        /**
         * @param keyStoreType (String)  (optional)
         * @return operation
         */
        public PostTruststoreOper keyStoreTypeQuery(Object... keyStoreType) {
            reqSpec.addQueryParam(KEY_STORE_TYPE_QUERY, keyStoreType);
            return this;
        }

        public static final String REMOVE_ALIAS_QUERY = "removeAlias";

        /**
         * @param removeAlias (String)  (optional)
         * @return operation
         */
        public PostTruststoreOper removeAliasQuery(Object... removeAlias) {
            reqSpec.addQueryParam(REMOVE_ALIAS_QUERY, removeAlias);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param certificate (File)  (optional)
         * @return operation
         */
         public PostTruststoreOper certificateMultiPart(File certificate) {
            reqSpec.addMultiPart(certificate);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostTruststoreOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostTruststoreOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #truststoreP12MultiPart  (optional)
     * return String
     */
    public static class PostTruststorePKCS12Oper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/etc/truststore";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostTruststorePKCS12Oper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /etc/truststore
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /etc/truststore
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param truststoreP12 (File)  (optional)
         * @return operation
         */
         public PostTruststorePKCS12Oper truststoreP12MultiPart(File truststoreP12) {
            reqSpec.addMultiPart(truststoreP12);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostTruststorePKCS12Oper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostTruststorePKCS12Oper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
